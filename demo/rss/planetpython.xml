<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Will McGugan: Seeking sponsorship for Rich and Textual</title>
	<guid>https://www.willmcgugan.com/blog/tech/post/seeking-sponsorship-for-rich-and-textual/</guid>
	<link>https://www.willmcgugan.com/blog/tech/post/seeking-sponsorship-for-rich-and-textual/</link>
	<description>&lt;p&gt;After a somewhat stressful three years running a startup, I am takings a year's sabbatical.
I'm going to use this time to focus on my health‐something I have neglected.
As good as it feels not to work full-time, I still plan on maintaining &lt;a href=&quot;https://github.com/Textualize/rich&quot;&gt;Rich&lt;/a&gt;, &lt;a href=&quot;https://github.com/Textualize/textual&quot;&gt;Textual&lt;/a&gt; and other Open Source projects, in addition to offering free tech support.&lt;/p&gt;
&lt;p&gt;Since I don't have any income at the moment, I want to start looking for sponsorship again. I'm hoping it will rise to a level where it will cover living costs for the year, but I'll be happy if it pays for coffee.&lt;/p&gt;
&lt;p&gt;If you have benefited from my work in the past, consider &lt;a href=&quot;https://github.com/sponsors/willmcgugan&quot;&gt;sponsoring me&lt;/a&gt;. Whatever you feel comfortable with.&lt;/p&gt;
&lt;p&gt;If your organization has extracted any value from my work, then consider picking one of the higher tiers to return the favor. I may be able to assist you with your project, wether it is terminal related or not. There is a lot of knowledge in my fleshy mammalian brain. Even in the age of AI, it could still benefit you.&lt;/p&gt;</description>
	<pubDate>Sat, 21 Jun 2025 16:50:13 +0000</pubDate>
</item>
<item>
	<title>Armin Ronacher: My First Open Source AI Generated Library</title>
	<guid>http://lucumr.pocoo.org/2025/6/21/my-first-ai-library</guid>
	<link>http://lucumr.pocoo.org/2025/6/21/my-first-ai-library</link>
	<description>&lt;p&gt;I'm currently evaluating how different models perform when generating XML
versus JSON.  Not entirely unexpectedly, XML is doing quite well — except
for one issue: the models frequently return invalid XML.  That made it
difficult to properly assess the quality of the content itself,
independent of how well the models serialize data.  So I needed a sloppy
XML parser.&lt;/p&gt;
&lt;p&gt;After a few failed attempts of getting Claude to just fix up my XML
parsing in different ways (it tried html5lib, the html lxml parser etc.)
which all resulted in various kinds of amusing failures, I asked Claude
to &lt;cite&gt;ultrathink&lt;/cite&gt; and write me a proper XML library from scratch.  I gave it
some basic instructions of what this should look like &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mitsuhiko/sloppy-xml-py/commit/76d4a5a3da2c8ac33b96151fdab9557b3363edc8&quot;&gt;and it one-shotted
something&lt;/a&gt;.
Afterwards I prompted it ~20 more times to do various smaller fixes as a
response to me reviewing it (briefly) and using it and to create an
extensive test suite.&lt;/p&gt;
&lt;p&gt;While that was taking place I had &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mitsuhiko/sloppy-xml-py/blob/main/logo.svg&quot;&gt;4o create a logo&lt;/a&gt;.  After
that I quickly converted it into an SVG with Illustrator and had Claude
make it theme-aware for dark and light modes, which it did perfectly.&lt;/p&gt;
&lt;p&gt;On top of that, Claude fully set up CI and even remotely controlled my
browser to configure the trusted PyPI publisher for the package for me.&lt;/p&gt;
&lt;p&gt;In summary, here is what AI did:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It wrote ~1100 lines of code for the parser&lt;/li&gt;
&lt;li&gt;It wrote ~1000 lines of tests&lt;/li&gt;
&lt;li&gt;It configured the entire Python package, CI, PyPI publishing&lt;/li&gt;
&lt;li&gt;Generated a README, drafted a changelog, designed a logo, made it theme-aware&lt;/li&gt;
&lt;li&gt;Did multiple refactorings to make me happier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial prompt that started it all (including typos):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want you to implement a single-file library here that parses XML sloppily.  It should implement two functions:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;cite&gt;stream_parse&lt;/cite&gt; which yields a stream of events (use named tuples) for the XML stream&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;tree_parse&lt;/cite&gt; which takes the output of stream_parse and assembles an element tree.  It should default to xml.etree.ElementTree and optoinally allow you to provide lxml too (or anything else)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should be fast but use pre-compiled regular expressions to parse the stream.  The idea here is that the output comes from systems that just pretend to speak XML but are not sufficiently protected against bad outoput (eg: LLMs)&lt;/p&gt;
&lt;p&gt;So for instance &amp;amp;amp; should turn into &amp;amp; but if &amp;amp;x is used (which is invalid) it should just retain as &amp;amp;x in the output.  Additionally if something is an invalid CDATA section we just gracefully ignore it.  If tags are incorrectly closed within a larger tag we recover the structure.  For instance &amp;lt;foo&amp;gt;&amp;lt;p&amp;gt;a&amp;lt;p&amp;gt;b&amp;lt;/foo&amp;gt; will just close the internal structures when &amp;lt;/foo&amp;gt; comes around.&lt;/p&gt;
&lt;p&gt;Use ultrathink.  Break down the implementation into&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;planning&lt;/li&gt;
&lt;li&gt;api stubs&lt;/li&gt;
&lt;li&gt;implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use sub tasks and sub agents to conserve context&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now if you look at that library, you might not find it amazingly
beautiful.  It probably is a bit messy and might have a handful of bugs I
haven't found yet.  It however works well enough for me right now for what
I'm doing and it definitely unblocked me.  In total it worked for about
30-45 minutes to write the initial implementation while I was doing
something else.  I kept prompting it for a little while to make some
progress as I ran into issues using it.&lt;/p&gt;
&lt;p&gt;If you want to look at what it looks like:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mitsuhiko/sloppy-xml-py&quot;&gt;mitsuhiko/sloppy-xml-py on GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/sloppy-xml/&quot;&gt;sloppy-xml on PyPI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be clear: this isn't an endorsement of using models for serious Open
Source libraries.  This was an experiment to see how far I could get with
minimal manual effort, and to unstick myself from an annoying blocker.
The result is good enough for my immediate use case and I also felt good
enough to publish it to PyPI in case someone else has the same problem.&lt;/p&gt;
&lt;p&gt;Treat it as a curious side project which says more about what's possible
today than what's necessarily advisable.&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;&lt;strong&gt;Postscriptum:&lt;/strong&gt; Yes, I did slap an Apache 2 license on it.  Is that even
valid when there's barely a human in the loop?  A fascinating question but
not one I'm not eager to figure out myself.  It is however certainly
something we'll all have to confront sooner or later.&lt;/p&gt;</description>
	<pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate>
</item>
<item>
	<title>The Python Coding Stack: I Want to Remove Duplicates from a Python List • How Do I Do It?</title>
	<guid>https://www.thepythoncodingstack.com/p/remove-duplicates-from-python-list</guid>
	<link>https://www.thepythoncodingstack.com/p/remove-duplicates-from-python-list</link>
	<description>&lt;p&gt;Another short article today to figure out ways to remove duplicate values from a list. The ideal solution depends on what you really need.&lt;/p&gt;&lt;p&gt;Let's explore.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Start With a List&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Well, we need a list first&amp;#8211;ideally, one with duplicate values. So, let's assume we have an online queue (line). But some people put their name in the queue more than once:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!GBYN!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f0fdbcb-7236-4635-9713-4d0459488b9d_1272x168.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!GBYN!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1f0fdbcb-7236-4635-9713-4d0459488b9d_1272x168.png&quot; width=&quot;1272&quot; height=&quot;168&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;All code blocks are available in text format at the end of this article &amp;#8226; #1 &amp;#8226; &lt;em&gt;The code images used in this article are created using &lt;a href=&quot;https://snappify.cello.so/f4AsFrwgwov&quot;&gt;Snappify&lt;/a&gt;. [Affiliate link]&lt;/em&gt;&lt;/div&gt;&lt;p&gt;Note how James and Kate were eager to ensure they were in the queue, so they put their name down twice.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Removing Duplicates: The Ugly Way&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;I was initially tempted not to include this section, but I changed my mind, as you can see. You can come up with several algorithms to perform this task &quot;manually&quot;. It's only a few lines of code. Here's one option:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2 is-viewable-img&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!r-bs!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f67e69c-59f4-4bec-9a41-4d8e88e46803_1200x462.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!r-bs!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f67e69c-59f4-4bec-9a41-4d8e88e46803_1200x462.png&quot; width=&quot;1200&quot; height=&quot;462&quot; src=&quot;src&quot; /&gt;&lt;div class=&quot;image-link-expand&quot;&gt;&lt;div class=&quot;pencraft pc-display-flex pc-gap-8 pc-reset&quot;&gt;&lt;div class=&quot;pencraft pc-reset icon-container restack-image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pencraft pc-reset icon-container view-image&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#2&lt;/div&gt;&lt;p&gt;You have a &lt;code&gt;queue_unique&lt;/code&gt; empty list ready to collect unique names. Next, you iterate using &lt;code&gt;enumerate()&lt;/code&gt; and add names to &lt;code&gt;queue_unique&lt;/code&gt; if they don't appear in the rest of the original list. Note that I'm using &lt;a href=&quot;https://www.thepythoncodingstack.com/p/a-python-slicing-story&quot;&gt;slicing&lt;/a&gt; in the &lt;code&gt;if&lt;/code&gt; statement to slice the list from &lt;code&gt;index + 1&lt;/code&gt; to the end of the list.&lt;/p&gt;&lt;p&gt;Let me show you another option. I'll discuss the outputs from these two manual versions later in this article:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2 is-viewable-img&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!k-uG!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5b3faa-9588-428f-bf9a-c97b73767361_1272x756.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!k-uG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5b3faa-9588-428f-bf9a-c97b73767361_1272x756.png&quot; width=&quot;1272&quot; height=&quot;756&quot; src=&quot;src&quot; /&gt;&lt;div class=&quot;image-link-expand&quot;&gt;&lt;div class=&quot;pencraft pc-display-flex pc-gap-8 pc-reset&quot;&gt;&lt;div class=&quot;pencraft pc-reset icon-container restack-image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pencraft pc-reset icon-container view-image&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#3&lt;/div&gt;&lt;p&gt;This time, you reverse the list so you can loop through the names in reverse order. The &lt;code&gt;queue_unique&lt;/code&gt; doesn't start as an empty list this time but as a copy of the original reversed list.&lt;/p&gt;&lt;p&gt;In the loop, you remove names from &lt;code&gt;queue_unique&lt;/code&gt; if the name appears later in the reversed list. A reminder that the &lt;code&gt;.remove()&lt;/code&gt; list method only removes the first occurrence of an item. It doesn't remove all of them.&lt;/p&gt;&lt;p&gt;Both algorithms remove duplicates. Great. But compare the output from the two versions. The difference between these output lists gives a clue to what's coming next.&lt;/p&gt;&lt;p&gt;But I won't dwell on these versions any longer.&lt;/p&gt;&lt;p&gt;&lt;em&gt;and PS: there are better versions of manual algorithms for this, but that's not the point of this first section, so let's move on!&lt;/em&gt;&lt;/p&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;p class=&quot;button-wrapper&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://buy.stripe.com/00g3de2iGdgg4gg7su&quot;&gt;&lt;span&gt;Support The Python Coding Stack&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;h2&gt;&lt;strong&gt;Removing Duplicates: The Set Way&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;When you learn about data structures, you learn about the various characteristics they have. Then, you start comparing data structures based on these characteristics. For example, lists, dictionaries, tuples, and strings are all &lt;a href=&quot;https://www.thepythoncodingstack.com/p/python-iterable-data-structures&quot;&gt;iterable&lt;/a&gt;. But lists and dictionaries are mutable, whereas tuples and strings are immutable. And lists, tuples, and strings are all &lt;a href=&quot;https://www.thepythoncodingstack.com/p/sequences-in-python-data-structure-2&quot;&gt;sequences&lt;/a&gt;, but dictionaries are not&amp;#8211;they're &lt;a href=&quot;https://www.thepythoncodingstack.com/p/mappings-in-python-data-structure-3&quot;&gt;mappings&lt;/a&gt;. You can read more about some of these categories here: &lt;a href=&quot;https://www.thepythoncodingstack.com/p/the-main-data-structure-categories&quot;&gt;The Python Data Structure Categories Series&lt;/a&gt;&lt;/p&gt;&lt;p&gt;And some data structures enforce uniqueness while others don't. Lists, as you've seen above, can have several equal items&amp;#8211;in the example above, you have several strings that are equal to each other.&lt;/p&gt;&lt;p&gt;However, sets are a Python data structure that can only have unique values:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!WF3t!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83dd975-fc0b-40d7-8da8-a9c5b15a00cc_1200x210.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!WF3t!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83dd975-fc0b-40d7-8da8-a9c5b15a00cc_1200x210.png&quot; width=&quot;1200&quot; height=&quot;210&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#4&lt;/div&gt;&lt;p&gt;So, the easiest way to remove duplicates from a list is to cast it into a set:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!yuk9!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfe0312c-4f98-4b09-a6ba-14a09440efd3_1272x252.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!yuk9!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfe0312c-4f98-4b09-a6ba-14a09440efd3_1272x252.png&quot; width=&quot;1272&quot; height=&quot;252&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#5&lt;/div&gt;&lt;p&gt;Or, if you prefer the output to still be a list, and perhaps you also want to overwrite the original variable name, then you can write the following:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!Zmf1!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc69371b4-c048-470a-9e18-0bdc2d831184_1200x252.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!Zmf1!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc69371b4-c048-470a-9e18-0bdc2d831184_1200x252.png&quot; width=&quot;1200&quot; height=&quot;252&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#6&lt;/div&gt;&lt;p&gt;Now, that was easy! Much better than the several lines of code in the previous section.&lt;/p&gt;&lt;p&gt;However, there's an issue. If this is a queue of customers, then the order in which they joined the queue is somewhat important, I would say!&lt;/p&gt;&lt;p&gt;Note how the new &lt;code&gt;queue&lt;/code&gt; list, the one without duplicates, no longer maintains the original order of the people within it. James was the first to join the queue, but Andy appears to have moved to the front when you removed duplicates.&lt;/p&gt;&lt;p&gt;Note that this also happened with the first of the manual algorithms in the previous section.&lt;/p&gt;&lt;p&gt;Sometimes, you don't care about the order of the elements in a list. If that's the case, you can cast the list into a set and then back into a list to remove duplicates.&lt;/p&gt;&lt;p&gt;But sometimes, the order matters. It certainly matters when dealing with a queue of customers. Let's look at another option.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Removing Duplicates: The Dictionary Way&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;A quick question before I carry on. Did you read the latest article I published just before this one? Here's the link: &lt;a href=&quot;https://www.thepythoncodingstack.com/p/are-python-dictionaries-ordered-data&quot;&gt;Are Python Dictionaries Ordered Data Structures?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;If you haven't, now is a good time to read it. Like this one, it's a short article, so it won't take you too long.&lt;/p&gt;&lt;p&gt;You're back. Great.&lt;/p&gt;&lt;p&gt;So, you now know that since Python 3.7, there's a guarantee that the order of insertion of items in a dictionary is maintained. And dictionary keys must also be unique&amp;#8211;you cannot have the same key appear twice in a dictionary.&lt;/p&gt;&lt;p&gt;Therefore, if you could create a dictionary from the elements in the list &lt;code&gt;queue&lt;/code&gt;, you would remove duplicates but also maintain the order. And there's a dictionary class method for that:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!78yq!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F781d3ebe-5728-4663-b0bd-f4ea6ba43f31_1272x252.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!78yq!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F781d3ebe-5728-4663-b0bd-f4ea6ba43f31_1272x252.png&quot; width=&quot;1272&quot; height=&quot;252&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#7&lt;/div&gt;&lt;p&gt;You create a dictionary from the list &lt;code&gt;queue&lt;/code&gt;. The items in the list become keys, and each key has a default value of &lt;code&gt;None&lt;/code&gt;. You can customise this default value, but you don't need to in this case, as you'll see in the next paragraph.&lt;/p&gt;&lt;p&gt;Great, you removed duplicates while maintaining order since dictionaries maintain order. The dictionary is created by iterating through the list, which explains why this version maintains the order of the items. But you don't want a dictionary, and you don't care about the values within it. So, you can cast this dictionary back into a list. You only keep the keys when you cast a dictionary into a list:&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!X38h!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed98302-ce45-419f-981e-f8f8276c16f4_1200x252.png&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!X38h!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed98302-ce45-419f-981e-f8f8276c16f4_1200x252.png&quot; width=&quot;1200&quot; height=&quot;252&quot; src=&quot;src&quot; /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;#8&lt;/div&gt;&lt;p&gt;You've now removed duplicates from the list &lt;em&gt;and&lt;/em&gt; maintained the original order by converting the list into a dictionary and then back into a list.&lt;/p&gt;&lt;p&gt;Simple&amp;#8211;once you know this idiom.&lt;/p&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Do you want to join a forum to discuss Python further with other Pythonistas? Upgrade to a paid subscription here on The Python Coding Stack to get exclusive access to &lt;a href=&quot;https://thepythoncodingplace.com?utm_source=the-python-coding-stack&quot;&gt;The Python Coding Place&lt;/a&gt;'s members' forum. More Python. More discussions. More fun.&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;button-wrapper&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://www.thepythoncodingstack.com/subscribe&quot;&gt;&lt;span&gt;Subscribe now&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;And you'll also be supporting this publication. I put plenty of time and effort into crafting each article. Your support will help me keep this content coming regularly and, importantly, will help keep it free for everyone.&lt;/em&gt;&lt;/p&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;h2&gt;&lt;strong&gt;A Limitation&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Both the set and dictionary routes have an important limitation. Items in a set must be hashable objects. And keys in a dictionary must also be hashable. Therefore, you can't use these techniques if you have a list that includes non-hashable objects, such as a list that contains other lists.&lt;/p&gt;&lt;p&gt;You can read more about hashability and hashable objects in this post: &lt;a href=&quot;https://www.thepythoncodingstack.com/p/wheres-william-python-hash-hashable&quot;&gt;Where's William? How Quickly Can You Find Him? &amp;#8226; What's a Python Hashable Object?&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Final Words&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;You may need to remove duplicates from a list in Python.&lt;/p&gt;&lt;p&gt;Don't write your own algorithm. Life's too short for that.&lt;/p&gt;&lt;p&gt;If you don't care about the order of the items in the list, cast the list into a set and then back into a list: &lt;code&gt;list(set(queue))&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; care about the order, create a dictionary from the list using &lt;code&gt;dict.fromkeys()&lt;/code&gt; and then cast it back into a list: &lt;code&gt;list(dict.fromkeys(queue))&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And the set and dictionary routes to removing duplicates are also more efficient than the manual ones shown above. So, it&amp;#8217;s a win-win.&lt;/p&gt;&lt;p&gt;That's it.&lt;/p&gt;&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2 is-viewable-img&quot; target=&quot;_blank&quot; href=&quot;https://substackcdn.com/image/fetch/$s_!BzBo!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5abc25d5-ed5b-4c91-8722-04387798f40a_6240x4160.jpeg&quot;&gt;&lt;div class=&quot;image2-inset&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/$s_!BzBo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5abc25d5-ed5b-4c91-8722-04387798f40a_6240x4160.jpeg&quot; width=&quot;588&quot; height=&quot;392.13461538461536&quot; src=&quot;src&quot; /&gt;&lt;div class=&quot;image-link-expand&quot;&gt;&lt;div class=&quot;pencraft pc-display-flex pc-gap-8 pc-reset&quot;&gt;&lt;div class=&quot;pencraft pc-reset icon-container restack-image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pencraft pc-reset icon-container view-image&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Photo by Lisett Kruusim&amp;#228;e: &lt;a href=&quot;https://www.pexels.com/photo/flowers-in-line-on-white-background-9510861/&quot;&gt;https://www.pexels.com/photo/flowers-in-line-on-white-background-9510861/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Code in this article uses Python 3.13&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;The code images used in this article are created using &lt;a href=&quot;https://snappify.cello.so/f4AsFrwgwov&quot;&gt;Snappify&lt;/a&gt;.&lt;/em&gt; &lt;em&gt;[Affiliate link]&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;You can also support this publication by making a &lt;a href=&quot;https://buy.stripe.com/00g3de2iGdgg4gg7su&quot;&gt;one-off contribution of any amount you wish&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;button-wrapper&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://buy.stripe.com/00g3de2iGdgg4gg7su&quot;&gt;&lt;span&gt;Support The Python Coding Stack&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;For more Python resources, you can also visit&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://realpython.com?utm_source=the-python-coding-stack&quot;&gt;Real Python&lt;/a&gt;&amp;#8212;you may even stumble on one of my own articles or courses there!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Also, are you interested in technical writing? You&amp;#8217;d like to make your own writing more narrative, more engaging, more memorable? Have a look at&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;http://stephengruppetta.com/breaking-the-rules&quot;&gt;Breaking the Rules&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;And you can find out more about me at&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://stephengruppetta.com/&quot;&gt;stephengruppetta.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Further reading related to this article&amp;#8217;s topic:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/a-python-slicing-story&quot;&gt;A Slicing Story&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/python-iterable-data-structures&quot;&gt;Iterable: Python's Stepping Stones&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/sequences-in-python-data-structure-2&quot;&gt;Sequences in Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/mappings-in-python-data-structure-3&quot;&gt;Finding Your Way To The Right Value &amp;#8226; Python's Mappings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/are-python-dictionaries-ordered-data&quot;&gt;Are Python Dictionaries Ordered Data Structures?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.thepythoncodingstack.com/p/wheres-william-python-hash-hashable&quot;&gt;Where's William? How Quickly Can You Find Him? &amp;#8226; What's a Python Hashable Object?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;h2&gt;Appendix: Code Blocks&lt;/h2&gt;&lt;h5&gt;Code Block #1&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = [&quot;James&quot;, &quot;Kate&quot;, &quot;Andy&quot;, &quot;James&quot;, &quot;Isabelle&quot;, &quot;Kate&quot;]
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #2&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue_unique = []
for index, name in enumerate(queue):
    if name not in queue[index + 1:]:
        queue_unique.append(name)


queue_unique
# ['Andy', 'James', 'Isabelle', 'Kate']
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #3&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = ['James', 'Kate', 'Andy', 'James', 'Isabelle', 'Kate']
queue.reverse()
queue    
# ['Kate', 'Isabelle', 'James', 'Andy', 'Kate', 'James']

queue_unique = queue.copy()

for index, name in enumerate(queue):
    if name in queue[index + 1:]:
        queue_unique.remove(name)
       

queue_unique.reverse()
queue_unique
# ['James', 'Kate', 'Andy', 'Isabelle']
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #4&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;set([1, 2, 3, 4, 3, 2, 1])
# {1, 2, 3, 4}
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #5&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = [&quot;James&quot;, &quot;Kate&quot;, &quot;Andy&quot;, &quot;James&quot;, &quot;Isabelle&quot;, &quot;Kate&quot;]
set(queue)
# {'Andy', 'James', 'Kate', 'Isabelle'}
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #6&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = list(set(queue))
queue
# ['Andy', 'James', 'Kate', 'Isabelle']&amp;#9;
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #7&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = [&quot;James&quot;, &quot;Kate&quot;, &quot;Andy&quot;, &quot;James&quot;, &quot;Isabelle&quot;, &quot;Kate&quot;]
dict.fromkeys(queue)
# {'James': None, 'Kate': None, 'Andy': None, 'Isabelle': None}
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;Code Block #8&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;code&gt;queue = list(dict.fromkeys(queue))
queue
# ['James', 'Kate', 'Andy', 'Isabelle']
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;For more Python resources, you can also visit&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://realpython.com?utm_source=the-python-coding-stack&quot;&gt;Real Python&lt;/a&gt;&amp;#8212;you may even stumble on one of my own articles or courses there!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Also, are you interested in technical writing? You&amp;#8217;d like to make your own writing more narrative, more engaging, more memorable? Have a look at&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;http://stephengruppetta.com/breaking-the-rules&quot;&gt;Breaking the Rules&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;And you can find out more about me at&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://stephengruppetta.com/&quot;&gt;stephengruppetta.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 20 Jun 2025 18:36:52 +0000</pubDate>
</item>
<item>
	<title>Ruslan Spivak: Book Notes: Full Frontal Calculus by Seth Braver — Chapter 1 Review</title>
	<guid>https://ruslanspivak.com/bb05/</guid>
	<link>https://ruslanspivak.com/bb05/</link>
	<description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span class=&quot;dquo&quot;&gt;&amp;#8220;&lt;/span&gt;Where there is life, there is change; where there is change, there is calculus.&amp;#8221;&lt;/strong&gt; &amp;#8212; Seth&amp;nbsp;Braver&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently went back to studying math to rebuild my foundations for &lt;span class=&quot;caps&quot;&gt;AI&lt;/span&gt; and machine learning. I didn&amp;#8217;t expect to enjoy a calculus book this much. Shocking, I know. But that&amp;#8217;s exactly what happened with &lt;em&gt;Full Frontal Calculus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Can calculus feel intuitive? Even fun? From the first few pages? For me, the answer was yes. (Okay, from page 8 to be&amp;nbsp;exact.)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Why This Book Clicked for&amp;nbsp;Me&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As part of &lt;a href=&quot;https://newsletter.ruslanspivak.com/p/im-back-math-ai-and-me&quot;&gt;my self-study&lt;/a&gt;, I’m reviewing select chapters from the books I work through. This post covers Chapter 1 of &lt;em&gt;Full Frontal Calculus&lt;/em&gt; by Seth&amp;nbsp;Braver.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;465px&quot; src=&quot;https://ruslanspivak.com/bb05/calc_braver-min.jpg&quot; width=&quot;360px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Before I stumbled on &lt;em&gt;Full Frontal Calculus&lt;/em&gt;, I tried a few limit-based calculus books and textbooks, but none of them spoke to me. Luckily, there&amp;#8217;s no shortage of calculus material these days, so it&amp;#8217;s easy to shop around and try different&amp;nbsp;sources.&lt;/p&gt;
&lt;p&gt;Braver&amp;#8217;s book grabbed me right away. The early focus on infinitesimals, the tight writing, and the emphasis on intuition won me over. I even caught myself smiling more than once. Rare for a math&amp;nbsp;book.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Chapter 1&amp;nbsp;Highlights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chapter 1 starts with &lt;strong&gt;infinitesimals&lt;/strong&gt;: &amp;#8220;an infinitely small number, smaller than any positive real number, yet greater than zero.&amp;#8221; One early example shows how a circle, imagined as a polygon with infinitely many infinitesimal sides, leads to the familiar area formula πr&amp;sup2;. If your geometry or trig is rusty, don&amp;#8217;t worry - it still makes sense. Braver then uses the same idea to show how curves appear straight on a small enough (infinitesimal) scale, which is the heart of differential&amp;nbsp;calculus.&lt;/p&gt;
&lt;p&gt;Things really clicked for me in the section titled &lt;em&gt;A Gift From Leibniz: d-Notation&lt;/em&gt;. Braver&amp;#8217;s explanation of &lt;em&gt;dy/dx&lt;/em&gt; shows how it captures infinitesimal change in a way that just makes sense. It helped me understand why derivatives represent slopes and rates in a way I could explain to a 10-year-old. Working through the derivative of x² from first principles was also deeply&amp;nbsp;satisfying. &lt;/p&gt;
&lt;p&gt;Practically speaking, Chapter 1&amp;nbsp;covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what infinitesimals&amp;nbsp;are&lt;/li&gt;
&lt;li&gt;how they help us define rates of&amp;nbsp;change&lt;/li&gt;
&lt;li&gt;the geometric meaning of&amp;nbsp;derivatives&lt;/li&gt;
&lt;li&gt;the elegant dy/dx notation from&amp;nbsp;Leibniz&lt;/li&gt;
&lt;li&gt;why we ignore higher-order infinitesimals like (dx)² or du *&amp;nbsp;dv&lt;/li&gt;
&lt;li&gt;and a first-principles derivation of the derivative of&amp;nbsp;x² &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The chapter ends with two powerful tools: the power rule and linearity properties. These let you compute derivatives of polynomials using just basic mental&amp;nbsp;math.&lt;/p&gt;
&lt;p&gt;The writing is sharp and often funny, in a math kind of way. There&amp;#8217;s even a cameo by the Sumerian beer goddess Ninkasi, who helps explain rate of change and derivatives using a vat of beer. It sounds quirky, but it&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;The book&amp;#8217;s style, clarity, and focus on intuition made me want to keep going. That&amp;#8217;s not something I&amp;#8217;ve felt with many math&amp;nbsp;books. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Final Thoughts and&amp;nbsp;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re following along or just curious about studying calculus again, I recommend giving Chapter 1 a shot. It&amp;#8217;s not always light reading, and the exercises are essential, but it might click for you like it did for me. &lt;a href=&quot;https://www.bravernewmath.com/&quot;&gt;Chapter 1 is available for free on the author&amp;#8217;s site&lt;/a&gt;, so you can explore it before deciding whether to dive&amp;nbsp;in. &lt;/p&gt;
&lt;p&gt;If you do decide to dive into the book, here are a few tips to get the most out of&amp;nbsp;it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you&amp;#8217;re rusty on pre-calculus (I was), make sure you&amp;#8217;ve got slope, rate of change, the point-slope formula, and the slope-intercept form down cold before the &lt;em&gt;Rates of Change&lt;/em&gt; section on page 10. For that, Seth Braver&amp;#8217;s other book &lt;em&gt;Precalculus Made Difficult&lt;/em&gt; has excellent material on those topics. You can probably get through it in a&amp;nbsp;day.&lt;/li&gt;
&lt;li&gt;Read slowly, with a pen or pencil in hand. Write in the margins (get a paperback copy). It might feel painfully slow at times (pun intended), but it&amp;#8217;s a recipe for deeper&amp;nbsp;understanding.&lt;/li&gt;
&lt;li&gt;The book includes answers to many exercises and is great for self-study. But the solutions are compact, so I recommend using Grok or ChatGPT to expand on them and deepen your&amp;nbsp;understanding.&lt;/li&gt;
&lt;li&gt;Once you&amp;#8217;ve finished the chapter and exercises, check out &lt;a href=&quot;https://www.youtube.com/playlist?list=PLFFekKQwSI_1q-qGq1WLSxw3oGfXXzAeH&quot;&gt;the author&amp;#8217;s YouTube videos&lt;/a&gt; that go along with the book. They&amp;#8217;re criminally underrated and oddly hard to find. You might enjoy them as much as I&amp;nbsp;do. &lt;/li&gt;
&lt;li&gt;For topics that are hard to retain, try spaced repetition with active recall. Anki works great for that, or use whatever tool you&amp;nbsp;prefer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br /&gt;
Chapter 1 sealed the deal. This is the calculus book I&amp;#8217;m sticking with. Looking forward to seeing how Braver develops the ideas from&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;More to come. Stay&amp;nbsp;tuned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Originally published in my newsletter &lt;a href=&quot;https://newsletter.ruslanspivak.com/p/book-notes-infinitesimals-derivatives?r=repoe&quot;&gt;Beyond Basics&lt;/a&gt;&lt;/strong&gt;. If you&amp;#8217;d like to get future posts like this by email, you can &lt;a href=&quot;https://newsletter.ruslanspivak.com/&quot;&gt;subscribe here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;P.S.&lt;/span&gt; I&amp;#8217;m not affiliated with the author. I just really enjoy the book and wanted to share&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 20 Jun 2025 14:07:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: The Real Python Podcast – Episode #254: Scaling Python Web Applications With Kubernetes and Karpenter</title>
	<guid>https://realpython.com/podcasts/rpp/254/</guid>
	<link>https://realpython.com/podcasts/rpp/254/</link>
	<description>&lt;p&gt;What goes into scaling a web application today? What are resources for learning and practicing DevOps skills? This week on the show, Calvin Hendryx-Parker is back to discuss the tools and infrastructure for autoscaling web applications with Kubernetes and Karpenter.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 20 Jun 2025 12:00:00 +0000</pubDate>
</item>
<item>
	<title>EuroPython: June Newsletter: Last Chance for Tickets!</title>
	<guid>https://blog.europython.eu/last-chance-for-tickets/</guid>
	<link>https://blog.europython.eu/last-chance-for-tickets/</link>
	<description>&lt;p&gt;Hello, Pythonistas! &amp;#x1F40D;&lt;/p&gt;&lt;p&gt;We added a lot of new subscribers since the last newsletter &amp;#x2013; if this is your first newsletter &amp;#x2013; Welcome! &amp;#x1F389;&lt;/p&gt;&lt;h1 id=&quot;tldr&quot;&gt;TL;DR:&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Some of the tickets are sold out already &amp;#x1F389;&lt;/li&gt;&lt;li&gt;We have a Python documentary premiere at EuroPython&lt;/li&gt;&lt;li&gt;Memorial session for Michael Foord&lt;/li&gt;&lt;li&gt;New sprints venue, and a completely new Social Event on an island in the heart of Prague this year!&lt;/li&gt;&lt;li&gt;Community Organisers &amp;amp; PyLadies Events&lt;/li&gt;&lt;li&gt;Speaker guidelines and an update on the Speaker Mentorship Programme&lt;/li&gt;&lt;li&gt;Snacks exchange&lt;/li&gt;&lt;li&gt;And a surprise at the end of the newsletter below&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;%E2%8F%B0-tickets&quot;&gt;&amp;#x23F0; Tickets&lt;/h1&gt;&lt;p&gt;We&amp;#x2019;re excited to share that tutorial and combined tickets are now &lt;strong&gt;sold out&lt;/strong&gt;!&amp;#xA0;&lt;/p&gt;&lt;p&gt;Conference tickets are still available &amp;#x2013; but don&amp;#x2019;t wait too long. Late Bird pricing kicks in on &lt;strong&gt;June 27&lt;/strong&gt;, and &lt;strong&gt;prices will go up&lt;/strong&gt;! If you can&amp;#x2019;t attend in person please check our Remote tickets &amp;#x2013; those are already available in the tickets store.&amp;#xA0;&lt;/p&gt;&lt;p&gt;More details at &lt;a href=&quot;https://europython.eu/tickets?ref=blog.europython.eu&quot;&gt;https://europython.eu/tickets&lt;/a&gt;&amp;#xA0;&lt;/p&gt;&lt;p&gt;Platinum, Gold and Silver Sponsorship packages are now fully booked. If you&amp;#x2019;re interested in sponsoring, please contact us at &lt;a href=&quot;mailto:sponsoring@europython.eu&quot; rel=&quot;noreferrer&quot;&gt;sponsoring@europython.eu.&lt;/a&gt; We&amp;#x2019;d love to explore options with you! We&amp;#x2019;ve also added a new startup tier &amp;#x2013; contact us for more details &amp;#x1F642;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%8E%A5-documentary-on-the-history-of-python&quot;&gt;&amp;#x1F3A5; Documentary on the History of Python&lt;/h1&gt;&lt;p&gt;The filmmakers from Cult Repo, formerly known as Honeypot, are working on a documentary about the history of Python and its vibrant community. It features over 20 core developers and takes us on a journey from the first days of Python to the latest developments.&amp;#xA0;&lt;/p&gt;&lt;p&gt;At EuroPython, we&amp;#x2019;re excited to share a special preview of the film, followed by a Q&amp;amp;A with Brett Cannon, Paul Everitt, and Armin Ronacher.&amp;#xA0;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%96%A4-memorial-session-for-michael-foord&quot;&gt;&amp;#x1F5A4; Memorial session for Michael Foord&lt;/h1&gt;&lt;p&gt;As part of EuroPython, we will be holding a memorial session to commemorate Michael Foord.&amp;#xA0;&lt;/p&gt;&lt;p&gt;Michael Foord (1974-2025) was a central figure in the Python community. He was an original thinker whose warmth, passion, and unfiltered humor touched the lives of many. A core Python developer and the creator of the influential unittest.mock module, he played a pivotal role in shaping testing practices and helped establish the Language Summit at PyCon. More than a brilliant engineer, Michael was a beloved mentor and friend, known for his elaborate vaping setup, colorful attire, and heartfelt conversations. His passing earlier this year left a profound void in the community, but his legacy lives on through his contributions to Python, his generous spirit, and the countless moments of camaraderie he inspired.&lt;/p&gt;&lt;p&gt;Friends of Michael are invited to attend this session and share their memories. We will provide more details about it closer to the event.&lt;/p&gt;
&lt;!--kg-card-begin: html--&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col width=&quot;333&quot; /&gt;&lt;col width=&quot;333&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfI27XR3Rzl9nqRXFsTsQ1elQgDT1u-yJV8YXEqPftbo28I-H4IgJyqpS0G5_emNqYs8KZQ9jzXj4VLRFW1FaSFZhRLEE4f3B7WwUIOa0VB4sA2gUmweEXFAwDyS81Y3BdWofN5tA?key=7MRGElcwE05wjMSe8jkdrI9g&quot; width=&quot;293&quot; height=&quot;438&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeCbNC_wfRggfLhXZdBNGz1y0tk7JQbUyK7WeU104ek69vpknNNn_MgTGRwrkPogn1rU-XIAoft5CMtT3-wnZ20LiBHIaTO7xvPB4leO_Su5KKGNmsRmLYghnRUFnzbonpwPBr2PQ?key=7MRGElcwE05wjMSe8jkdrI9g&quot; width=&quot;293&quot; height=&quot;439&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt; &amp;#xA9; All rights reserved by &lt;/span&gt;&lt;a href=&quot;https://ntoll.org/?ref=blog.europython.eu&quot;&gt;&lt;span&gt;Nicholas Tollervey&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt; &amp;#xA9; All rights reserved by &lt;/span&gt;&lt;a href=&quot;https://www.flickr.com/photos/kushaldas/?ref=blog.europython.eu&quot;&gt;&lt;span&gt;Kushal Das&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;!--kg-card-end: html--&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;%E2%9D%A3%EF%B8%8Fbeginners%E2%80%99-day&quot;&gt;&amp;#x2763;&amp;#xFE0F;Beginners&amp;#x2019; Day&lt;/h1&gt;&lt;p&gt;On Saturday 19th July, we&amp;#x2019;ll be hosting a Beginners&amp;#x2019; Day to help introduce people to Python programming and its applications. Beginners&amp;#x2019; Day will feature three tracks running in parallel; The Unconference, Django Girls, and Humble Data. The events are designed to welcome newcomers to the Python ecosystem, including a series of talks and panels by junior developers and two workshops designed to introduce complete beginners to web development and data science.&lt;/p&gt;&lt;p&gt;We are running the following three tracks:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The Unconference&lt;/strong&gt;, a series of panels and discussions designed to help people just getting into tech to start or grow their career&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Django Girls&lt;/strong&gt;, a hands-on workshop teaching the basics of web development&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Humble Data&lt;/strong&gt;, a hands-on workshop teaching the basics of data science&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Beginners&amp;#x2019; Day is open to everyone, and you don&amp;#x2019;t need a EuroPython ticket to attend (although note that some tracks will cost &amp;#x20AC;5 to attend otherwise). From students to those exploring a career change, we warmly invite anyone curious about starting their programming journey. Expect a friendly, fun, and supportive environment that will leave you feeling more confident and inspired to continue learning.&lt;/p&gt;&lt;p&gt;Please see &lt;a href=&quot;https://ep2025.europython.eu/beginners-day/?ref=blog.europython.eu#europython-beginners-day&quot;&gt;this page&lt;/a&gt; for more details and to apply. Places are limited and will be given on a first come, first serve basis.&lt;br /&gt;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB-contribute-collaborate-code-sprints-weekend&quot;&gt;&amp;#x1F469;&amp;#x200D;&amp;#x1F4BB; Contribute, collaborate, code: sprints weekend&amp;#xA0;&lt;/h1&gt;&lt;p&gt;Join us for EuroPython&amp;amp;aposs traditional Sprint Weekend on Saturday and Sunday (19&amp;#x2013;20 July) following the main conference. The conference team provides space, lunch, and coffee&amp;#x2014;you bring the projects, energy, and ideas. Whether you&amp;#x2019;re a seasoned maintainer or trying your first contribution, sprints are informal hackathons to collaborate on open&amp;#x2011;source, share knowledge, and solve problems together.&amp;#xA0;&lt;/p&gt;&lt;p&gt;More info: &lt;a href=&quot;http://europython.eu/sprints?ref=blog.europython.eu&quot;&gt;europython.eu/sprints&lt;/a&gt;&amp;#xA0;&lt;/p&gt;&lt;img src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXc_KCzn-beWf-KTtvNIKP59CUp1YkkiIRFOZ04g4Bzy32sWfdzt7QVpQ-337jNhq0w97QwonUPb5k7AWeDMlSInnPhjU_XdtmlnCYYaN4zOJnwWmQt4pFOqyBxRsJtM8-ezstyf2g?key=7MRGElcwE05wjMSe8jkdrI9g&quot; class=&quot;kg-image&quot; alt=&quot;alt&quot; width=&quot;697&quot; height=&quot;463&quot; /&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%8F%96%EF%B8%8F-pack-your-instruments-sportswear-or-board-games&quot;&gt;&amp;#x1F3D6;&amp;#xFE0F; Pack your instruments, sportswear, or board games&lt;/h1&gt;&lt;p&gt;We&amp;#x2019;ll host a laid&amp;#x2011;back social evening on Thursday, 17 July at 19:30 CEST on St&amp;#x159;eleck&amp;#xFD; Island&amp;#x2014;right in the heart of Prague. Expect riverside seating, live music and jam sessions (feel free to bring an instrument), plus board games and plenty of relaxation spots. There&amp;amp;aposs also a mix of outdoor sports (volleyball, croquet, p&amp;#xE9;tanque) and light snacks and drinks for a summery, informal vibe.&amp;#xA0;&lt;/p&gt;&lt;p&gt;A limited number of social-event tickets will be available separately&amp;#x2014;keep an eye out so you don&amp;#x2019;t miss out.&amp;#xA0;&lt;/p&gt;&lt;p&gt;More info: &lt;a href=&quot;http://europython.eu/social-event?ref=blog.europython.eu&quot;&gt;europython.eu/social-event&lt;/a&gt;&amp;#xA0;&lt;/p&gt;&lt;img src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXd39PG3QbDYHnfpzly0IacSP9foEenPLvh7FpPDTIAdJUakLoeOlGXM86qFXU5izxtB2171dB2QoHaDh_PbEyvg8Kvoa7afnKWtuBcO6jxoQqxTPo7NvnykaTxIis74be2-yxByzg?key=7MRGElcwE05wjMSe8jkdrI9g&quot; class=&quot;kg-image&quot; alt=&quot;alt&quot; width=&quot;689&quot; height=&quot;460&quot; /&gt;&lt;h1 id=&quot;%F0%9F%91%A5-community-organisers-pyladies-events&quot;&gt;&lt;strong&gt;&amp;#x1F465; &lt;/strong&gt;Community Organisers &amp;amp; PyLadies Events&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The Python community is an essential part of the language, and for many people, it&amp;#x2019;s the reason they stick around and keep meetups, conferences, forums, and so much more running to help others.&lt;/p&gt;&lt;p&gt;We have several activities focused on communities across Europe and around the world, as well as initiatives centered around Python itself.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ep2025.europython.eu/community-activities/?ref=blog.europython.eu&quot;&gt;https://europython.eu/community-activities/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We&amp;#x2019;re excited to announce a range of events for underrepresented groups in computing this year! &amp;#x1F389; Whether you&amp;#x2019;re new to PyLadies or a long-time supporter, we warmly welcome you to join us and be part of our supportive community.&lt;/p&gt;&lt;p&gt;These events are open only to those who have a conference ticket, giving our participants an opportunity to connect, share, and grow together.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ep2025.europython.eu/pyladies/?ref=blog.europython.eu&quot;&gt;https://europython.eu/pyladies/&lt;/a&gt; &lt;/p&gt;&lt;h1 id=&quot;%F0%9F%8D%AC-snacks-exchange&quot;&gt;&amp;#x1F36C; Snacks exchange&lt;/h1&gt;&lt;p&gt;Have you ever wondered what people snack on in Spain? Or wanted to try chocolates from Australia? Then participate in the EuroPython snack exchange!&amp;#xA0;&lt;/p&gt;&lt;p&gt;Simply bring snacks typical of your home country, country of residence, or just a country you think has really delicious food with you to EuroPython. At the conference you&amp;#x2019;ll be able to swap what you brought with other participants in the exchange. Don&amp;#x2019;t miss your chance to discover your new favourite snack, and share in the fun with our attendees from across Europe and the globe!&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%8E%A4-speaker-guidelines&quot;&gt;&amp;#x1F3A4; Speaker guidelines&lt;/h1&gt;&lt;p&gt;We&amp;#x2019;ve uploaded a number of suggestions to help you to prepare your session. The guidelines include information about:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The audio and technical equipment in each session room&lt;/li&gt;&lt;li&gt;The capacity of each room&lt;/li&gt;&lt;li&gt;The time available for each session&lt;/li&gt;&lt;li&gt;How to share your session slides with attendees on Pretalx&lt;/li&gt;&lt;li&gt;How to test your equipment on the day and access the Speaker Ready Room&lt;/li&gt;&lt;li&gt;How to make effective, accessible presentations&lt;/li&gt;&lt;li&gt;Specific things needed to prepare for tutorial and poster sessions.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;#x1F449; Check them out here: &lt;a href=&quot;https://ep2025.europython.eu/guidelines/?ref=blog.europython.eu&quot;&gt;https://ep2025.europython.eu/guidelines/&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%8E%A4-speaker-mentorship-programme&quot;&gt;&amp;#x1F3A4; Speaker Mentorship Programme&lt;/h1&gt;&lt;h2 id=&quot;first-time-speakers%E2%80%99-workshop&quot;&gt;First Time Speakers&amp;#x2019; Workshop&lt;/h2&gt;&lt;p&gt;We had such a fun, interactive session&amp;#x2014;thank you to everyone who showed up. A huge thank you to Cristi&amp;#xE1;n Maureira-Fredes from the Programme team for walking us through the details of giving a talk at EuroPython. We also loved hearing from Iryna Kondrashchenko, who shared how much last year&amp;#x2019;s Speaker Mentorship Programme helped her speaking journey.&lt;/p&gt;&lt;p&gt;A huge shoutout to our inspiring panel&amp;#x2014;Abigail Mesrenyame Dogbe, La&amp;#xED;s Carvalho, and Rodrigo Gir&amp;#xE3;o Serr&amp;#xE3;o. Thank you for sharing your personal experiences as speakers, answering the questions, and offering honest and encouraging advice.&lt;/p&gt;&lt;p&gt;&amp;#x1F3A5; Missed it? You can watch the recording here: &lt;a href=&quot;https://youtu.be/a2ZajKY6bm0?ref=blog.europython.eu&quot;&gt;https://youtu.be/a2ZajKY6bm0&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;%E2%9D%93what-does-guido-van-rossum-like-about-europython&quot;&gt;&amp;#x2753;What does Guido van Rossum like about EuroPython?&lt;/h1&gt;&lt;p&gt;And what about speakers, core developers, and other community members? Find out by following us on YouTube and social media! We&amp;amp;aposre sharing short clips where community members talk about what they&amp;#x2019;re most excited for at the next EuroPython.&amp;#xA0;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;TikTok: &lt;a href=&quot;https://www.tiktok.com/@europython?ref=blog.europython.eu&quot;&gt;https://www.tiktok.com/@europython&lt;/a&gt;&lt;/li&gt;&lt;li&gt;YouTube: &lt;a href=&quot;https://www.youtube.com/@EuroPythonConference?ref=blog.europython.eu&quot;&gt;https://www.youtube.com/@EuroPythonConference&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;Instagram: &lt;a href=&quot;https://www.instagram.com/europython/?ref=blog.europython.eu&quot;&gt;https://www.instagram.com/europython/&lt;/a&gt;&amp;#xA0;&amp;#xA0;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://blog.europython.eu/content/images/2025/06/Social-Event--2-.png&quot; class=&quot;kg-image&quot; alt=&quot;alt&quot; width=&quot;1080&quot; height=&quot;720&quot; /&gt;&lt;h1 id=&quot;%F0%9F%92%B0sponsors-highlight&quot;&gt;&amp;#x1F4B0;Sponsors Highlight&lt;/h1&gt;&lt;p&gt;We would like to thank our sponsors for supporting the conference. Their generous contributions help us keep the event more accessible and ticket prices lower. Sponsors play a vital role in making this community gathering possible.&lt;/p&gt;&lt;p&gt;Special thanks go our platinum sponsors:&amp;#xA0;&lt;/p&gt;&lt;img src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdWERE7kzQ6PZI5zkDwPs-QmEoL4Q-bChRniAC5HQ_3kmDzyRPvQImGYsxfTWnCzeOBuCljKnMwJEAwhf_JBY6zhmQJ2nwU8NHVYD4uw_wcOstaHE0HFLDRNrmUP3MFDDTvltQ1?key=7MRGElcwE05wjMSe8jkdrI9g&quot; class=&quot;kg-image&quot; alt=&quot;alt&quot; width=&quot;985&quot; height=&quot;111&quot; /&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%92%9E-upcoming-events-in-the-python-community&quot;&gt;&amp;#x1F49E; Upcoming Events in the Python Community&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;EuroPython, Prague, 14-20 July &lt;a href=&quot;https://ep2025.europython.eu/?ref=blog.europython.eu&quot;&gt;https://ep2025.europython.eu&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;EuroSciPy, Krak&amp;#xF3;w, 18-22 August&amp;#xA0; &lt;a href=&quot;https://euroscipy.org/2025/?ref=blog.europython.eu&quot;&gt;https://euroscipy.org/2025/&lt;/a&gt;&amp;#xA0;&amp;#xA0;&lt;/li&gt;&lt;li&gt;PyCon Poland, Gliwice, 28-31 August &lt;a href=&quot;https://pl.pycon.org/2025/en/?ref=blog.europython.eu&quot;&gt;https://pl.pycon.org/2025/en/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;PyCon Greece 2025, Athens, Greece, 29-30 August&amp;#xA0; &lt;a href=&quot;https://2025.pycon.gr/en/?ref=blog.europython.eu&quot;&gt;https://2025.pycon.gr/en/&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;PyCamp CZ 25 beta, T&amp;#x159;e&amp;#x161;tice, 12-14 September &lt;a href=&quot;https://pycamp.cz/?ref=blog.europython.eu&quot;&gt;https://pycamp.cz/&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;Pycon UK, Manchester, 19-22 September &lt;a href=&quot;https://2025.pyconuk.org/?ref=blog.europython.eu&quot;&gt;https://2025.pyconuk.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;PyCon Estonia, Tallinn, 2-3 October &lt;a href=&quot;https://pycon.ee/?ref=blog.europython.eu&quot;&gt;https://pycon.ee/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;PyCon Spain, Seville, 17-19 October&amp;#xA0; &lt;a href=&quot;https://2025.es.pycon.org/?ref=blog.europython.eu&quot;&gt;https://2025.es.pycon.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;PyCon Finland, Jyv&amp;#xE4;skyl&amp;#xE4;, 17 October&amp;#xA0; &lt;a href=&quot;https://2025.ploneconf.org/pyconfi-2025?ref=blog.europython.eu&quot;&gt;https://2025.ploneconf.org/pyconfi-2025&lt;/a&gt;&lt;/li&gt;&lt;li&gt;PyCon Sweden, Stockholm, 30-31 October &lt;a href=&quot;https://pycon.se/?ref=blog.europython.eu&quot;&gt;https://pycon.se/&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;PyCon France, Lyon, 30 October-2 November &lt;a href=&quot;https://www.pycon.fr/2025/en/index.html?ref=blog.europython.eu&quot;&gt;https://www.pycon.fr/2025/en/index.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;%F0%9F%91%8B-see-you-all-next-month&quot;&gt;&amp;#x1F44B; See You All Next Month&amp;#xA0;&lt;/h1&gt;&lt;p&gt;Enjoyed this update? Help us spread the word! Like, share, and subscribe &amp;#x2014; and don&amp;#x2019;t forget to tell your friends about us.&lt;/p&gt;&lt;p&gt;Someone shared this with you? Join the list at &lt;a href=&quot;https://blog.europython.eu/&quot; rel=&quot;noreferrer&quot;&gt;blog.europython.eu&lt;/a&gt; to get these directly every month.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Think others in your Python circle would be interested? Forward the email and share it with them. &amp;#x1F642;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Stay connected with us on social media:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/company/europython/?ref=blog.europython.eu&quot;&gt;https://www.linkedin.com/company/europython/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;X: &lt;a href=&quot;https://x.com/europython?ref=blog.europython.eu&quot;&gt;https://x.com/europython&lt;/a&gt;&lt;/li&gt;&lt;li&gt;TikTok: &lt;a href=&quot;https://www.tiktok.com/@europython?ref=blog.europython.eu&quot;&gt;https://www.tiktok.com/@europython&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;Mastodon: &lt;a href=&quot;https://fosstodon.org/@europython?ref=blog.europython.eu&quot;&gt;https://fosstodon.org/@europython&lt;/a&gt;&lt;/li&gt;&lt;li&gt;BlueSky: &lt;a href=&quot;https://bsky.app/profile/europython.eu?ref=blog.europython.eu&quot;&gt;https://bsky.app/profile/europython.eu&lt;/a&gt;&amp;#xA0;&lt;/li&gt;&lt;li&gt;YouTube: &lt;a href=&quot;https://www.youtube.com/@EuroPythonConference?ref=blog.europython.eu&quot;&gt;https://www.youtube.com/@EuroPythonConference&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Instagram: &lt;a href=&quot;https://www.instagram.com/europython/?ref=blog.europython.eu&quot;&gt;https://www.instagram.com/europython/&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Thu, 19 Jun 2025 20:55:55 +0000</pubDate>
</item>
<item>
	<title>PyCharm: Training Your ML Models With Cadence</title>
	<guid>https://blog.jetbrains.com/pycharm/2025/06/training-your-ml-models-with-cadence/</guid>
	<link>https://blog.jetbrains.com/pycharm/2025/06/training-your-ml-models-with-cadence/</link>
	<description>&lt;img width=&quot;2559&quot; height=&quot;1439&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2025/06/PC-social-BlogFeatured-1280x720-2x-21.png&quot; alt=&quot;&quot; class=&quot;wp-image-576904&quot; /&gt;



&lt;p&gt;In the rapidly evolving domains of machine learning (ML) and artificial intelligence (AI), the tools and technologies used by developers can significantly influence the speed, efficiency, and effectiveness of their projects. Recognizing this, we introduced &lt;a href=&quot;https://lp.jetbrains.com/cadence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cadence &lt;/a&gt;in PyCharm 2025.1, a plugin that merges the ease of local development with advanced cloud computing capabilities.&lt;/p&gt;


    &lt;div class=&quot;buttons&quot;&gt;
        &lt;div class=&quot;buttons__row&quot;&gt;
                                                &lt;a href=&quot;https://plugins.jetbrains.com/plugin/23731-jetbrains-cadence&quot; class=&quot;btn &quot; target=&quot;&quot; rel=&quot;noopener&quot;&gt;Get started for free&lt;/a&gt;
                                    &lt;/div&gt;
    &lt;/div&gt;







&lt;h2 class=&quot;wp-block-heading&quot;&gt;Why Cadence?&lt;/h2&gt;



&lt;p&gt;Cadence makes it possible to run your code on powerful cloud hardware directly from PyCharm. This integration alleviates the typical complexities and extensive setup usually associated with cloud computing. Whether you&amp;#8217;re a solo developer experimenting with new models or part of a larger team pushing the boundaries of ML applications, Cadence ensures that your transition to powerful cloud resources is seamless and straightforward.&lt;/p&gt;



&lt;span id=&quot;more-576723&quot;&gt;&lt;/span&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Serverless computing on demand&lt;/h3&gt;



&lt;p&gt;Reduce overhead with Cadence’s serverless computing options, allowing you to access and manage GPUs with transparent and predictable per-second billing. This removes the need for significant upfront investments in hardware, making advanced computing power accessible at any scale.&lt;/p&gt;



&lt;img width=&quot;2464&quot; height=&quot;1448&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2025/06/104927-0.18165582.png&quot; alt=&quot;&quot; class=&quot;wp-image-576881&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Run your code as is&lt;/h3&gt;



&lt;p&gt;With Cadence, your existing PyCharm projects require no modifications to fit into the cloud environment. Upload and execute your code as usual; Cadence handles all of the adjustments on the back end, ensuring your cloud session feels like an extension of your local setup.&lt;/p&gt;







&lt;h3 class=&quot;wp-block-heading&quot;&gt;Tailored for PyCharm users&lt;/h3&gt;



&lt;p&gt;Debug and deploy using the PyCharm interface you’re familiar with. Set breakpoints, monitor outputs, and interact with your remote environment with no additional learning curve.&lt;/p&gt;







&lt;h3 class=&quot;wp-block-heading&quot;&gt;Data management simplified&lt;/h3&gt;



&lt;p&gt;Say goodbye to manual data transfers. Cadence automatically synchronizes your projects’ data to the cloud, allowing you to download the results of each experiment directly in the IDE.&lt;/p&gt;







&lt;h3 class=&quot;wp-block-heading&quot;&gt;Reliable experimentation&lt;/h3&gt;



&lt;p&gt;Review, refine, and rerun your past experiments. Cadence provides consistent replication of results, facilitating continuous improvements.&lt;/p&gt;







&lt;h3 class=&quot;wp-block-heading&quot;&gt;Optimized resource allocation&lt;/h3&gt;



&lt;p&gt;Choose from a wide array of cloud settings, including configurations like 8xA100 and 8xH100, to scale your resources according to project demands. Schedule as many tasks as you need simultaneously, and Cadence will automatically check for available hosts in different regions and zones.&lt;/p&gt;



&lt;img width=&quot;2254&quot; height=&quot;1364&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2025/06/resources-cover.png&quot; alt=&quot;&quot; class=&quot;wp-image-576870&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Ready for teams&lt;/h3&gt;



&lt;p&gt;Adopting Cadence isn’t just about improving individual productivity; it’s about enhancing team dynamics and output. Share setup configurations, results, and insights effortlessly within your team.&amp;nbsp;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Getting started with Cadence&lt;/h2&gt;



&lt;p&gt;You can try Cadence for free with a USD 30 welcome credit by installing the plugin from &lt;a href=&quot;https://plugins.jetbrains.com/plugin/23731-jetbrains-cadence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JetBrains Marketplace&lt;/a&gt; or by enabling it directly in PyCharm via &lt;em&gt;Settings | Plugins | Marketplace&lt;/em&gt;.&amp;nbsp;&lt;/p&gt;



&lt;p&gt;To see how easy it is to start training your ML models in PyCharm, check out this tutorial video.&lt;/p&gt;



&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;

&lt;/div&gt;


    &lt;div class=&quot;buttons&quot;&gt;
        &lt;div class=&quot;buttons__row&quot;&gt;
                                                &lt;a href=&quot;https://plugins.jetbrains.com/plugin/23731-jetbrains-cadence&quot; class=&quot;btn &quot; target=&quot;&quot; rel=&quot;noopener&quot;&gt;Get started for free&lt;/a&gt;
                                    &lt;/div&gt;
    &lt;/div&gt;</description>
	<pubDate>Thu, 19 Jun 2025 12:17:55 +0000</pubDate>
</item>
<item>
	<title>Talk Python Blog: New Theme Song: Served In A Flask</title>
	<guid>https://talkpython.fm/blog/posts/new-theme-song-served-in-a-flask/</guid>
	<link>https://talkpython.fm/blog/posts/new-theme-song-served-in-a-flask/</link>
	<description>&lt;p&gt;&lt;img src=&quot;https://talkpython.fm/blog/posts/flask-image.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Those of you who were early listeners of Talk Python To Me might remember the amazing theme song we launched with: &lt;a href=&quot;https://soundcloud.com/smixx/smixx-developers-feat-steve&quot;&gt;Developers, Developers, Developers&lt;/a&gt; by &lt;a href=&quot;https://soundcloud.com/smixx&quot;&gt;Smixx&lt;/a&gt;. Thanks to Smixx for letting us use his music for our intros.&lt;/p&gt;
&lt;p&gt;Over the years, people have asked &amp;ldquo;What happened to the rap song&amp;rdquo;? I took it down for a couple of reasons not worth digging into but have definitely missed the fun and irreverant intro to the show.&lt;/p&gt;</description>
	<pubDate>Wed, 18 Jun 2025 18:55:42 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python Project: Build a Word Count Command-Line App</title>
	<guid>https://realpython.com/courses/word-count-app-project/</guid>
	<link>https://realpython.com/courses/word-count-app-project/</link>
	<description>&lt;p&gt;The &lt;strong&gt;word count&lt;/strong&gt; command (&lt;a href=&quot;https://en.wikipedia.org/wiki/Wc_(Unix)&quot;&gt;&lt;code&gt;wc&lt;/code&gt;&lt;/a&gt;) is a classic utility that you might use to determine the number of lines, words, and bytes in files or &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)&quot;&gt;standard input&lt;/a&gt;. It&amp;rsquo;s a staple tool for anyone working with text files on &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix-like&quot;&gt;Unix-like&lt;/a&gt; systems. But have you ever wondered how such a tool is designed and implemented?&lt;/p&gt;
&lt;p&gt;In this practice exercise, you&amp;rsquo;ll dive into the inner workings of the Unix &lt;code&gt;wc&lt;/code&gt; command by building its simplified version from scratch using Python. Not only will this coding challenge solidify your understanding of &lt;a href=&quot;https://realpython.com/working-with-files-in-python/&quot;&gt;file handling&lt;/a&gt; and &lt;a href=&quot;https://realpython.com/python-string-split-concatenate-join/&quot;&gt;text processing&lt;/a&gt;, but it&amp;rsquo;ll also give you a taste of how to structure &lt;a href=&quot;https://realpython.com/python-command-line-arguments/&quot;&gt;command-line utilities&lt;/a&gt; in Python.&lt;/p&gt;
&lt;p&gt;By the end of this challenge, you&amp;rsquo;ll have a functional version of the &lt;code&gt;wc&lt;/code&gt; command that can faithfully reproduce the outputs you&amp;rsquo;re accustomed to seeing in a Unix &lt;a href=&quot;https://realpython.com/terminal-commands/&quot;&gt;terminal&lt;/a&gt;. However, it won&amp;rsquo;t be an exact replica of the &lt;code&gt;wc&lt;/code&gt; command, as you&amp;rsquo;ll omit or adapt some features for simplicity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this coding challenge, you&amp;rsquo;ll:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read content from &lt;strong&gt;files&lt;/strong&gt; and &lt;strong&gt;standard input (stdin)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Count the number of &lt;strong&gt;lines&lt;/strong&gt;, &lt;strong&gt;words&lt;/strong&gt;, and &lt;strong&gt;bytes&lt;/strong&gt; in the input&lt;/li&gt;
&lt;li&gt;Differentiate between bytes and &lt;strong&gt;characters&lt;/strong&gt; to handle &lt;strong&gt;Unicode&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;strong&gt;command-line arguments&lt;/strong&gt; to specify what counts to display&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While working on this challenge, you&amp;rsquo;ll gain hands-on experience with several modules from Python&amp;rsquo;s standard library, such as &lt;a href=&quot;https://realpython.com/python-pathlib/&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt; for manipulating the file system and &lt;a href=&quot;https://realpython.com/command-line-interfaces-python-argparse/&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; for parsing command-line arguments. Familiarity with basic Python programming and file handling will be beneficial, but detailed instructions and helpful tips will guide you through each step of the process.&lt;/p&gt;
&lt;p&gt;The challenge is broken down into a number of &lt;strong&gt;tasks&lt;/strong&gt;, each accompanied by clear instructions and illustrative examples. You&amp;rsquo;ll receive &lt;strong&gt;automated feedback&lt;/strong&gt; on your solutions when you follow along using the accompanying materials. If you run into any issues or have questions, then don&amp;rsquo;t hesitate to ask for help in the &lt;strong&gt;comments section&lt;/strong&gt; below the corresponding lesson.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also reach out to the Real Python community on &lt;a href=&quot;https://realpython.com/community/&quot;&gt;Slack&lt;/a&gt; or join live conversations during &lt;a href=&quot;https://realpython.com/office-hours/&quot;&gt;Office Hours&lt;/a&gt;, where you&amp;rsquo;ll have an opportunity to share your screen remotely.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Completing each task unlocks the next one. Once you&amp;rsquo;ve completed a task, you can compare your code with the &lt;strong&gt;sample solution&lt;/strong&gt; provided in the following lesson. Remember that there&amp;rsquo;s often more than one way to solve a problem. If your solution differs slightly but meets the acceptance criteria and adheres to good programming practices, then that&amp;rsquo;s perfectly fine.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 18 Jun 2025 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Python Software Foundation: 2025 PSF Board Election Schedule</title>
	<guid>https://pyfound.blogspot.com/2025/06/2025-psf-board-election-schedule.html</guid>
	<link>https://pyfound.blogspot.com/2025/06/2025-psf-board-election-schedule.html</link>
	<description>&lt;p&gt;The PSF Board elections are a chance for the community to choose representatives to help the Python Software Foundation create a vision for and build the future of the Python community. This year, there are 4 seats open on the PSF Board. Check out who is currently on the board on &lt;a href=&quot;https://www.python.org/psf/board/&quot; target=&quot;_blank&quot;&gt;the PSF's website&lt;/a&gt;. (Dawn Wages, Jannis Leidel, Kushal Das, and Simon Willison are at the end of their current terms.) As &lt;a href=&quot;https://pyfound.blogspot.com/2025/04/2025-psf-board-election-schedule-change.html&quot; target=&quot;_blank&quot;&gt;we previously shared&lt;/a&gt;, the Board election will take place a little later this year to better serve our community and ease pressure on PSF Staff.&amp;nbsp;&lt;/p&gt;&lt;h2&gt;Board Election Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Nominations open: Tuesday, July 29th, 2:00 pm UTC&lt;/li&gt;&lt;li&gt;Nomination cut-off: Tuesday, August 12th, 2:00 pm UTC&lt;/li&gt;&lt;li&gt;Announce candidates: Thursday, August 14th&lt;/li&gt;&lt;li&gt;Voter affirmation cut-off: Tuesday, August 26th, 2:00 pm UTC&lt;/li&gt;&lt;li&gt;Voting start date: Tuesday, September 2nd, 2:00 pm UTC&lt;/li&gt;&lt;li&gt;Voting end date: Tuesday, September 16th, 2:00 pm UTC&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Voting&amp;nbsp;&lt;/h2&gt;&lt;p&gt;You must be a Contributing, Supporting, or Fellow member by August 26th and affirm your intention to vote to participate in this election. If you are currently a Managing member, you will receive a communication soon notifying you that your membership type will be changed to Contributing per last year’s &lt;a href=&quot;https://github.com/psf/bylaws/compare/a35a6071de181adbb7a160d5d1447e7b0272359c...359cbc540f2f6bf00bc46b9dbe3e00a950612c27&quot; target=&quot;_blank&quot;&gt;Bylaw change that merged Managing and Contributing memberships&lt;/a&gt;.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;Check out the &lt;a href=&quot;https://www.python.org/psf/membership/&quot; target=&quot;_blank&quot;&gt;PSF membership page&lt;/a&gt; to learn more about membership classes and benefits. You can affirm your voting intention by following the steps in &lt;a href=&quot;https://www.youtube.com/watch?v=lWfyvPqAAJs&quot; target=&quot;_blank&quot;&gt;our video tutorial&lt;/a&gt;:&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log in to psfmember.org&lt;/li&gt;&lt;li&gt;Check your eligibility to vote (You must be a Contributing, Supporting, or Fellow member)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Choose “Voting Affirmation” at the top right&lt;/li&gt;&lt;li&gt;Select your preferred intention for voting in 2025&lt;/li&gt;&lt;li&gt;Click the “Submit” button&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Per another recent &lt;a href=&quot;https://github.com/python/psf-bylaws/compare/a35a6071de181adbb7a160d5d1447e7b0272359c...6bac449&quot; target=&quot;_blank&quot;&gt;Bylaw change that allows for simplifying the voter affirmation process by treating past voting activity as intent to continue voting&lt;/a&gt;, if you cast your ballot last year, you will automatically be added to the 2025 voter roll. Please note that if you removed or changed your email on psfmember.org, you may not automatically be added to this year's voter roll.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;If you have questions about membership, please email psf-elections@pyfound.org.&lt;/p&gt;&lt;h2&gt;Run for the Board&lt;/h2&gt;&lt;p&gt;Who runs for the board? People who care about the Python community, who want to see it flourish and grow, and also have a few hours a month to attend regular meetings, serve on committees, participate in conversations, and promote the Python community. Want to learn more about being on the PSF Board? Check out the following resources to learn more about the PSF, as well as what being a part of the PSF Board entails:&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZLKj6FaQA4M&quot; target=&quot;_blank&quot;&gt;Life as Python Software Foundation Director video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://youtu.be/kD6cPBfR4A4?si=IizoM5mDPaUhQL_X&quot; target=&quot;_blank&quot;&gt;FAQs About the PSF Board video&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Our past few Annual Impact Reports:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/annual-report/2024&quot; target=&quot;_blank&quot;&gt;2024 Annual Impact Report&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/annual-report/2023/&quot; target=&quot;_blank&quot;&gt;2023 Annual Impact Report&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/annual-report/2022/&quot; target=&quot;_blank&quot;&gt;2022 Annual Impact Report&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;You can nominate yourself or someone else. We would encourage you to reach out to folks before you nominate them to make sure they are enthusiastic about the potential of joining the Board. Nominations open on Tuesday, July 29th, 2:00 pm UTC, so you have time to talk with potential nominees, research the role, and craft a nomination statement for yourself or others. Take a look at &lt;a href=&quot;https://www.python.org/nominations/elections/2024-python-software-foundation-board/nominees/&quot; target=&quot;_blank&quot;&gt;last year’s nomination statements&lt;/a&gt; for reference.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Learn more and join the discussion&lt;/h2&gt;&lt;p&gt;You are welcome to join the discussion about the PSF Board election on the &lt;a href=&quot;https://discuss.python.org/t/2025-psf-board-election/89521&quot; target=&quot;_blank&quot;&gt;Discuss forum&lt;/a&gt;. This year, we’ll also be hosting &lt;a href=&quot;https://pyfound.blogspot.com/2024/08/ask-questions-or-tell-us-what-you-think.html&quot; target=&quot;_blank&quot;&gt;PSF Board Office Hours&lt;/a&gt; on the &lt;a href=&quot;https://discord.gg/4Hm36PPgpG&quot; target=&quot;_blank&quot;&gt;PSF Discord&lt;/a&gt; in July and August to answer questions about running for and serving on the board. Subscribe to the &lt;a href=&quot;https://pyfound.blogspot.com/&quot; target=&quot;_blank&quot;&gt;PSF blog&lt;/a&gt; or, if you're a member, join the psf-member-announce mailing list to receive updates leading up to the election.&lt;/p&gt;</description>
	<pubDate>Wed, 18 Jun 2025 11:19:04 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #510: 10 Polars Tools and Techniques To Level Up Your Data Science</title>
	<guid>https://talkpython.fm/episodes/show/510/10-polars-tools-and-techniques-to-level-up-your-data-science</guid>
	<link>https://talkpython.fm/episodes/show/510/10-polars-tools-and-techniques-to-level-up-your-data-science</link>
	<description>Are you using Polars for your data science work? Maybe you've been sticking with the tried-and-true Pandas? There are many benefits to Polars directly of course. But you might not be aware of all the excellent tools and libraries that make Polars even better. Examples include Patito which combines Pydantic and Polars for data validation and polars_encryption which adds AES encryption to selected columns. We have Christopher Trudeau back on Talk Python To Me to tell us about his list of excellent libraries to power up your Polars game and we also talk a bit about his new Polars course.&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Episode sponsors&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;a href='https://talkpython.fm/agntcy'&amp;gt;Agntcy&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/sentry'&amp;gt;Sentry Error Monitoring, Code TALKPYTHON&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/training'&amp;gt;Talk Python Courses&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;h2 class=&quot;links-heading&quot;&amp;gt;Links from the show&amp;lt;/h2&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;strong&amp;gt;New Theme Song (Full-Length Download and backstory)&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/flasksong/&quot; target=&quot;_blank&quot; &amp;gt;talkpython.fm/blog&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Polars for Power Users Course&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://training.talkpython.fm/courses/polars-for-power-users&quot; target=&quot;_blank&quot; &amp;gt;training.talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Awesome Polars&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/ddotta/awesome-polars?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Polars Visualization with Plotly&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://docs.pola.rs/user-guide/misc/visualization/#plotly&quot; target=&quot;_blank&quot; &amp;gt;docs.pola.rs&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Dataframely&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/Quantco/dataframely?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Patito&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/JakobGM/patito?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars_iptools&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/erichutchins/polars_iptools?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars-fuzzy-match&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/bnmoch3/polars-fuzzy-match?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Nucleo Fuzzy Matcher&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/helix-editor/nucleo?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars-strsim&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/foxcroftjn/polars-strsim?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars_encryption&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/zlobendog/polars_encryption?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars-xdt&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/pola-rs/polars-xdt?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars_ols&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/azmyrajab/polars_ols?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Least Mean Squares Filter in Signal Processing&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://www.geeksforgeeks.org/least-mean-squares-filter-in-signal-processing/?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;www.geeksforgeeks.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars-pairing&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/apcamargo/polars-pairing?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Pairing Function&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://en.wikipedia.org/wiki/Pairing_function?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;en.wikipedia.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;polars_list_utils&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://github.com/dashdeckers/polars_list_utils?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Harley Schema Helpers&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://tomburdge.github.io/harley/reference/harley/schema_helpers/?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;tomburdge.github.io&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Marimo Reactive Notebooks Episode&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/show/501/marimo-reactive-notebooks-for-python#links-section&quot; target=&quot;_blank&quot; &amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Marimo&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://marimo.io/?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;marimo.io&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Ahoy Narwhals Podcast Episode Links&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/show/480/ahoy-narwhals-are-bridging-the-data-science-apis&quot; target=&quot;_blank&quot; &amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Watch this episode on YouTube&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://www.youtube.com/watch?v=aIdvlJN1bNQ&quot; target=&quot;_blank&quot; &amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Episode #510 deep-dive&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/show/510/10-polars-tools-and-techniques-to-level-up-your-data-science#takeaways-anchor&quot; target=&quot;_blank&quot; &amp;gt;talkpython.fm/510&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Episode transcripts&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/transcript/510/10-polars-tools-and-techniques-to-level-up-your-data-science&quot; target=&quot;_blank&quot; &amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;--- Stay in touch with us ---&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Subscribe to Talk Python on YouTube&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/youtube&quot; target=&quot;_blank&quot; &amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Talk Python on Bluesky&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://bsky.app/profile/talkpython.fm&quot; target=&quot;_blank&quot; &amp;gt;@talkpython.fm at bsky.app&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Talk Python on Mastodon&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@talkpython&quot; target=&quot;_blank&quot; &amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;talkpython&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Michael on Bluesky&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://bsky.app/profile/mkennedy.codes?featured_on=talkpython&quot; target=&quot;_blank&quot; &amp;gt;@mkennedy.codes at bsky.app&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Michael on Mastodon&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@mkennedy&quot; target=&quot;_blank&quot; &amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;mkennedy&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;</description>
	<pubDate>Wed, 18 Jun 2025 08:00:00 +0000</pubDate>
</item>
<item>
	<title>PyCoder’s Weekly: Issue #686: Free-Threaded Update, GPU Programming, GitHub Actions, and More (June 17, 2025)</title>
	<guid>https://pycoders.com/issues/686</guid>
	<link>https://pycoders.com/issues/686</link>
	<description>&lt;p&gt; &lt;span&gt;#686 – JUNE 17, 2025&lt;/span&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/issues/686/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com&quot;&gt;&lt;img alt=&quot;The PyCoder&amp;rsquo;s Weekly Logo&quot; src=&quot;https://cdn.pycoders.com/37bdf31dc645f968ffb90196e5d38ff5&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14668/feed&quot; target=&quot;_blank&quot;&gt;State of Free-Threaded Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This is a blog post from the Python Language Summit 2025 giving an update on the progress of free-threaded Python. You may also be interested in the complete list of &lt;a href=&quot;https://pycoders.com/link/14639/feed&quot; target=&quot;_blank&quot;&gt;Language Summit Blogs&lt;/a&gt;.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14668/feed&quot; target=&quot;_blank&quot;&gt;PYTHON SOFTWARE FOUNDATION&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14644/feed&quot; target=&quot;_blank&quot;&gt;GPU Programming in Pure Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Talk Python interviews Bryce Adelstein Lelbach and they talk about using Python to harness the insane power of modern GPUs for data science and ML.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14644/feed&quot; target=&quot;_blank&quot;&gt;KENNEDY &amp;amp; LELBACH&lt;/a&gt;&lt;/span&gt; &lt;span&gt;podcast&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14634/feed&quot; target=&quot;_blank&quot;&gt;Making Friends with Agents: A Mental Model for Agentic AI&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/14634/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/960c8557da1b223c307d71a618e3e2a8&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Explore a mental model to befriend your AI agent. This blog walks through designing goal-driven, tool-savvy agents that think in loops, speak your language, and bounce back &lt;a href=&quot;https://pycoders.com/link/14634/feed&quot; target=&quot;_blank&quot;&gt;from failure through durable execution →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14634/feed&quot; target=&quot;_blank&quot;&gt;TEMPORAL&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14667/feed&quot; target=&quot;_blank&quot;&gt;Continuous Integration and Deployment Using GitHub Actions&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Agile methodologies rely on robust DevOps systems to manage and automate common tasks in a continually changing codebase. GitHub Actions can help.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14667/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;course&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14636/feed&quot; target=&quot;_blank&quot;&gt;NumPy v2.3.0 Released&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14636/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/NUMPY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14653/feed&quot; target=&quot;_blank&quot;&gt;Call for Applicants for a Django Fellow&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14653/feed&quot; target=&quot;_blank&quot;&gt;DJANGO SOFTWARE FOUNDATION&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14650/feed&quot; target=&quot;_blank&quot;&gt;Django Bugfix Releases: 5.2.3, 5.1.11, and 4.2.23&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14650/feed&quot; target=&quot;_blank&quot;&gt;DJANGO SOFTWARE FOUNDATION&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14669/feed&quot; target=&quot;_blank&quot;&gt;Python 3.13.5 Released&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14669/feed&quot; target=&quot;_blank&quot;&gt;PYTHON.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14647/feed&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;scikit-learn 1.7&lt;/code&gt; Released&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14647/feed&quot; target=&quot;_blank&quot;&gt;SCIKIT-LEARN.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Python Jobs&lt;/h2&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14646/feed&quot; target=&quot;_blank&quot;&gt;Sr. Software Developer (Python, Healthcare) (USA)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/14646/feed&quot; target=&quot;_blank&quot;&gt;Prenosis&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14665/feed&quot; target=&quot;_blank&quot;&gt;Senior Software Engineer – Quant Investment Platform (LA or Dallas) (Los Angeles, CA, USA)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/14665/feed&quot; target=&quot;_blank&quot;&gt;Causeway Capital Management LLC&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.pythonjobshq.com?utm_source=newsletter&amp;utm_campaign=pycoders686&amp;utm_medium=feed&quot; target=&quot;_blank&quot;&gt;More Python Jobs &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Articles &amp;amp; Tutorials&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14655/feed&quot; target=&quot;_blank&quot;&gt;A &lt;code&gt;dict&lt;/code&gt; That Can Report Which Keys Weren&amp;rsquo;t Used&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; When testing, you may want to make sure that all parts of a dictionary get accessed to get full coverage. This post shows a modified &lt;code&gt;dict&lt;/code&gt; that tracks which keys got used.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14655/feed&quot; target=&quot;_blank&quot;&gt;PETER BENGTSSON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14654/feed&quot; target=&quot;_blank&quot;&gt;Better Django Management Commands&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Writing Django management commands can involve a ton of boilerplate code. This article shows you how to use two libraries that could cut your management command code in half: django-click and django-typer.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14654/feed&quot; target=&quot;_blank&quot;&gt;REVSYS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14635/feed&quot; target=&quot;_blank&quot;&gt;Easy-to-Deploy, Enterprise-Ready GenAI&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Check out the Intel GenAI code library for ready-to-deploy and easy-to-integrate solutions.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14635/feed&quot; target=&quot;_blank&quot;&gt;INTEL CORPORATION&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14658/feed&quot; target=&quot;_blank&quot;&gt;How Can You Structure Your Python Script?&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Structure your Python script like a pro. This guide shows you how to organize your code, manage dependencies with PEP 723, and handle command-line arguments.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14658/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14640/feed&quot; target=&quot;_blank&quot;&gt;Quiz: How Can You Structure Your Python Script?&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this quiz, you&amp;rsquo;ll test your understanding of organizing and structuring Python scripts. You&amp;rsquo;ll revisit key concepts about best practices for writing clear, maintainable, and executable Python code.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14640/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14641/feed&quot; target=&quot;_blank&quot;&gt;Wyvern&amp;rsquo;s Open Satellite Feed&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Wyvern is a satellite startup who has recently launched an open data program. This article plays with that data using Python libraries such as astropy, geocoder, rich and more.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14641/feed&quot; target=&quot;_blank&quot;&gt;MARKSBLOGG.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14645/feed&quot; target=&quot;_blank&quot;&gt;Pointblank: Data Validation Made Beautiful&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This post introduces &lt;code&gt;pointblank&lt;/code&gt; a library for doing data validation. It includes chainable execution and interactive reports to see what is working in your data pipeline.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14645/feed&quot; target=&quot;_blank&quot;&gt;POSIT-DEV.GITHUB.IO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14651/feed&quot; target=&quot;_blank&quot;&gt;5 Non-LLM Software Trends to Be Excited About&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Tired of reading about AI and LLMs? This post talks about other tech that is rapidly changing in the software world, including local-first applications, web assembly, the improvement of cross-platform tools, and more.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14651/feed&quot; target=&quot;_blank&quot;&gt;LEONARDO CREED&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14657/feed&quot; target=&quot;_blank&quot;&gt;Concurrency in &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; and Threading&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Want to write faster Python code? Discover the difference between &lt;code&gt;async/await&lt;/code&gt; and threading and how concurrency works in Python with real-world examples.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14657/feed&quot; target=&quot;_blank&quot;&gt;CHEUK TING HO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14666/feed&quot; target=&quot;_blank&quot;&gt;Defining Your Own Python Function&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn how to define your own Python function, pass data into it, and return results to write clean, reusable code in your programs.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14666/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14664/feed&quot; target=&quot;_blank&quot;&gt;Quiz: Defining Your Own Python Function&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14664/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14662/feed&quot; target=&quot;_blank&quot;&gt;TIL: HTML 404 Errors for FastHTML&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A quick &amp;ldquo;Things I&amp;rsquo;ve Learned&amp;rdquo; post showing how to write a custom HTTP 404 handler for FastHTML.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14662/feed&quot; target=&quot;_blank&quot;&gt;DANIEL ROY GREENFIELD&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14663/feed&quot; target=&quot;_blank&quot;&gt;PyData Virginia 2025 Talks&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A list of the recorded talks from PyData Virginia 2025.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14663/feed&quot; target=&quot;_blank&quot;&gt;YOUTUBE.COM&lt;/a&gt;&lt;/span&gt; &lt;span&gt;video&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Projects &amp;amp; Code&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14652/feed&quot; target=&quot;_blank&quot;&gt;py-shiny: Shiny for Python Web Apps&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14652/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/POSIT-DEV&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14649/feed&quot; target=&quot;_blank&quot;&gt;quarto-cli: Scientific and Technical Publishing System&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14649/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/QUARTO-DEV&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14642/feed&quot; target=&quot;_blank&quot;&gt;paramiko: Native Python SSHv2 Library&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14642/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/PARAMIKO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14660/feed&quot; target=&quot;_blank&quot;&gt;toolz: A Functional Standard Library for Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14660/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/PYTOOLZ&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14656/feed&quot; target=&quot;_blank&quot;&gt;ahocorasick_rs: Check for Multiple Patterns in a Single String&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14656/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/G-RESEARCH&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Events&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14637/feed&quot; target=&quot;_blank&quot;&gt;Weekly Real Python Office Hours Q&amp;amp;A (Virtual)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; June 18, 2025&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14637/feed&quot; target=&quot;_blank&quot;&gt;REALPYTHON.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14661/feed&quot; target=&quot;_blank&quot;&gt;PyData Bristol Meetup&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; June 19, 2025&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14661/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14638/feed&quot; target=&quot;_blank&quot;&gt;PyLadies Dublin&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; June 19, 2025&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14638/feed&quot; target=&quot;_blank&quot;&gt;PYLADIES.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14643/feed&quot; target=&quot;_blank&quot;&gt;Python Nordeste 2025&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; June 20 to June 23, 2025&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14643/feed&quot; target=&quot;_blank&quot;&gt;PYTHONNORDESTE.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/14659/feed&quot; target=&quot;_blank&quot;&gt;Python Coding Club for Teens (PyTahoua)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; June 20 to June 23, 2025&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/14659/feed&quot; target=&quot;_blank&quot;&gt;PYTHONNIGER.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;Happy Pythoning!&lt;br /&gt;This was PyCoder&amp;rsquo;s Weekly Issue #686.&lt;br /&gt;&lt;a href=&quot;https://pycoders.com/issues/686/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/p&gt; &lt;img src=&quot;https://pycoders.com/issues/686/open/feed&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;alt&quot; /&gt; 
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Subscribe to 🐍 PyCoder&amp;rsquo;s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week &lt;a href=&quot;https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 19:30:00 +0000</pubDate>
</item>
<item>
	<title>Adrarsh Divakaran: Will AI Replace Junior Developers? I Asked Experts at Pycon US</title>
	<guid>https://blog.adarshd.dev/posts/pycon-us-ai-and-future-of-programming/</guid>
	<link>https://blog.adarshd.dev/posts/pycon-us-ai-and-future-of-programming/</link>
	<pubDate>Tue, 17 Jun 2025 17:42:16 +0000</pubDate>
</item>
<item>
	<title>Django Weblog: DSF member of the month - Elena Williams</title>
	<guid>https://www.djangoproject.com/weblog/2025/jun/17/dsf-member-of-the-month-elena-williams/</guid>
	<link>https://www.djangoproject.com/weblog/2025/jun/17/dsf-member-of-the-month-elena-williams/</link>
	<description>&lt;p&gt;For June 2025, we welcome Elena Williams as our DSF member of the month! ⭐&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Elena in DjangoGirls Brisbane&quot; src=&quot;https://media.djangoproject.com/blog/images/2025/06/elena.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Elena is a dedicated member of the Django community. She is part of the Code of Conduct Working Group and she is a Django Girls organizer in Australia. She has been a DSF member since July 2014. &lt;br /&gt;
You can learn more about Elena by visiting &lt;a href=&quot;https://elena.github.io/&quot;&gt;Elena's website&lt;/a&gt; and &lt;a href=&quot;https://github.com/elena/&quot;&gt;her GitHub Profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s spend some time getting to know Elena better!&lt;/p&gt;
&lt;h4 id=&quot;s-can-you-tell-us-a-little-about-yourself-hobbies-education-etc&quot;&gt;Can you tell us a little about yourself (hobbies, education, etc)&lt;/h4&gt;
&lt;p&gt;My background is that I was always interested in computers, though my parents were more creative types, my Dad was an Architect (of built structures). When I was a kid we had computers for CAD around the house before it was common. I was always into STEM subjects, but unfortunately in that era for girls to do engineering it was a bit too hostile for me, so I trained in finance instead and worked in that industry (finance and banking, MNE orgs) for nearly a decade. I kept coming back to coding and was always building computers, and was obsessed with the internet as a technology from pretty early on. Just after I discovered Django I did a Masters in Computing at ANU. To this day my main hobbies are programming/webdev (very much a person who codes for fun) and the open source community. My persistent other hobbies are hackspace activities, I like CNC and laser stuff, but will pick up any and all tools/mediums and give them a go, lately been spending time with blender and cabinetry. When I can, I like to get away to snowboard or kitesurf, and this wild Australian long distance endurance navigation sport called rogaining. Really at the moment I’m mostly focussed on being a parent (which is an awesome experience), my friends (mostly python related), my job and working on the community here in Australia. With my family we go camping/hiking more than most. I’ve also continued to be a sessional academic at ANU teaching software engineering for many years. &lt;/p&gt;
&lt;h4 id=&quot;s-how-did-you-start-using-django&quot;&gt;How did you start using Django?&lt;/h4&gt;
&lt;p&gt;Golly, I’ve been using Django forever. I’d started doing web stuff in the early ‘00s and worked in a range of languages and paradigms. I was working in a physics research institute at a high profile university in Australia doing web stuff and made friends with a bunch of the doctoral students. In around 2007, one of these students, and my good mate, Dave, randomly recommended this new framework Django and Python (and emacs also actually but that’s a different story). Basically I got into it immediately and never looked back and went on to build a career around Django (actually Dave later gave up physics and did the same thing too). I’ve been engaged with the Python and Django communities to varying degrees since about 2011 as well. To be honest when I discovered the language and the framework I really didn’t expect to still be passionate about them all these years later but I really am! Hopefully I can continue to be well into the future also.&lt;/p&gt;
&lt;h4 id=&quot;s-what-other-framework-do-you-know-and-if-there-is-anything-you-would-like-to-have-in-django-if-you-had-magical-powers&quot;&gt;What other framework do you know and if there is anything you would like to have in Django if you had magical powers?&lt;/h4&gt;
&lt;p&gt;Over the years (being a curious person) I’ve worked with many many web frameworks and technologies, the vast majority of the big ones. In recent years I’ve been spending time with FastAPI and SQLAlchemy as well as non-python technologies. Django is better though.&lt;/p&gt;
&lt;p&gt;Not using Django as much at the moment makes me love it even more and realise how lucky we are with such a well designed and well supported framework. It’s not perfect but it’s outstanding. &lt;/p&gt;
&lt;p&gt;Having said that: at a technical level I’d love to have “cheaper” ways (in every sense) to deploy. Even though deployment methods have changed beyond recognition several times over the years, I always thought this would get easier over time and am kind of surprised that it hasn’t.&lt;/p&gt;
&lt;p&gt;Very specific to me is that I need Django to have stronger support for many database schemas in the same project, but honestly this is just a specific problem I have inherited in a project at the moment, but it’ll pass eventually.&lt;/p&gt;
&lt;h4 id=&quot;s-what-projects-are-you-working-on-now&quot;&gt;What projects are you working on now?&lt;/h4&gt;
&lt;p&gt;Over the last few years I’ve helped organise a number of events, including PyConAU, though realised I’d been taking on too many projects and trying to pull back actually! Still: Internationally I’m on DSF CoC with a great team. Nationally this year I’ve been serving on the committee of our main Australian open source foundation body, Linux Australia, as well as working in a small team trying to bring together all of the Australian python user groups under a banner we hope to call Python Australia and I’ve had a keen interest in python user groups around the world. In my home town I’ve been organising our local user groups for some time with an awesome team, as well as our fantastic local PyLadies.&lt;/p&gt;
&lt;p&gt;For work I’m flat-chat working in a senior role on a Platform team in a small data company that provides “critical digital infrastructure” for Australia. Though my most important project of all at the moment really is my family, and I do really prioritise my friends and being healthy nowadays. I’m an avid hackerspace person and do have a couple of purportedly active projects (I’m obsessed with maps among other things) but these are relatively neglected at the moment as I just don’t have the bandwidth.&lt;/p&gt;
&lt;h4 id=&quot;s-which-django-libraries-are-your-favorite-core-or-3rd-party&quot;&gt;Which Django libraries are your favorite (core or 3rd party)?&lt;/h4&gt;
&lt;p&gt;I just love the ORM. We’re so spoiled in the Django community we don’t realise how mature and feature-rich the ORM is. Maybe I’m biased because I’ve been using it for so long I just “think” in Django ORM and I’ve been working away from it lately. It’s such a (comparative) pleasure to use. You can nit-pick at it but compared to anything else it’s so beautifully thought through.&lt;/p&gt;
&lt;p&gt;The admin was the Django “killer app” in 2008 and I’d argue still is in 2025. To be some dozens of seconds away from a custom CMS backend at any time is still magical. Pony magical. It’s still as impressive as ever to show off to people. Also in the same way that Guido says python makes a great calculator: Django makes a great quick tool for really fast data munging, can’t describe how liberating it feels using it for this purpose.&lt;/p&gt;
&lt;p&gt;Writing tests in Django is under-rated too.&lt;/p&gt;
&lt;p&gt;There are so many amazing 3rd party libraries, too many to mention. For shout-outs I don’t think I have any projects without Debug Toolbar. The 3rd party caching libraries Memcache and Redis are both great. I’m also usually happy when I turn on Celery, and excited to see DEP-0014 on its way. Danny and Audrey’s Django Cookiecutter project is a great reference even if you don’t take the whole enchilada.&lt;/p&gt;
&lt;h4 id=&quot;s-what-are-the-top-three-things-in-django-that-you-like&quot;&gt;What are the top three things in Django that you like?&lt;/h4&gt;
&lt;p&gt;I’ve been lucky to generally have had a pretty great time with Django. Generally I’ve used it for projects where it was a really good fit and so it wasn’t painful. As such I like weird little quirky things about Django. Haters-can-hate but I actually really like a bunch of this controversial stuff, for example I like settings.py as a pattern for projects that aren’t out of control; I enjoy using and customising the management commands framework; I think Meta class as an approach to that type of awkward problem is neat; I’ve generally had a pretty nice time with the template language; I dig into utils and reuse them probably more often than most; ORM and the Tests obviously (it’s trivial to plugin pytest of course). Everything is a trade-off in software engineering and while I’m very biased: I just like the trade-offs that Django has chosen, they’re some of the best-in-class.&lt;/p&gt;
&lt;p&gt;The top 3 things though? This is tough. I just like it. To nail down actual answers though: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the framework workflow overall;&lt;/li&gt;
&lt;li&gt;that the project has stayed so consistently high quality and battle-hardened for so many years; &lt;/li&gt;
&lt;li&gt;and the community and my friends (shout out sp-wg)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;s-i-know-you-have-start-django-with-one-of-the-first-version-what-do-you-think-of-the-evolution-of-the-framework&quot;&gt;I know you have start Django with one of the first version, what do you think of the evolution of the framework?&lt;/h4&gt;
&lt;p&gt;This is a great question! Thanks for being interested in this history, the Django history is a nice story of having good values and persisting and this actually being successful over the long run. &lt;/p&gt;
&lt;p&gt;For me there’s all the “back in my day” stuff that’s not obvious now, like Python not being taken seriously as a “real” programming language, let alone javascript, but now those tides have very much turned, and web development is considered extremely respectable and high profile, which was unimaginable when I started. Django started in Web1.0 (whatever that meant), and actually grew substantially during Web2.0 and now even in the modern Web3 era is kind of establishing itself into being part of the backbone of the large parts of the internet that aren’t obvious. Thibaud has a list he maintains of websites that he believes use Django, this is great if you haven’t seen it.&lt;/p&gt;
&lt;p&gt;One of the most impressive parts of the evolution has been how decisions have been made and implemented. In normal “work” you just have to make things as fast as possible and endlessly add features consequences-be-damned. Open source gets to be fundamentally the opposite. Traditionally one of the defining characteristics of Open Source is that “time is no object”. That is good design and implementation can be allowed the time to breathe and be excessively thought through. There is no rush or deadline. While there’s always conflict and drama I think there has been less so in Django than in most other projects as design decisions have been painstakingly threshed out and perfected in mailing lists, tickets, DEPs and forums over the months and years it takes to make them. The people inside see the drama but we’re in the news almost never compared to most projects in the same space. The point is that hypothetically it’s possible to try to make the best possible design decisions. In practice most projects don’t do this, but I think Django has demonstrated exemplary maturity in trying to pursue this ideal, and is regularly recognised for it. &lt;/p&gt;
&lt;p&gt;The original founding team deserve full credit for instilling this culture and each successive group of stewards deserve credit for preserving it. &lt;/p&gt;
&lt;p&gt;There have (and always will be) missteps. For example CBVs are such an obviously good idea on paper, but in practice people don’t think so. On the other hand Andrew Godwin’s implementation of migrations back in the day, that was completely re-writing South from scratch, was truly lovely, even though it was a battle to get to the point of having migrations at all. There’s the history around the db module, which pretty much everyone was too scared to touch after Malcolm died until there were some impressive breakthroughs in it during the “under the hood” sessions not long after DjangoGirls people started coming on board.&lt;/p&gt;
&lt;p&gt;Django consciously has decided to be extremely considered in its adoption of change and this has been a great thing. Other frameworks have generally been more cavalier, while Django has been steady, careful and reliable. The other full-feature frameworks are kind of in decline, or have hurt themselves by too-much-change-too-fast, while Django has steadily slowly grown and is the trusty go-to tool for a certain kind of job.&lt;/p&gt;
&lt;p&gt;Now moving forward I see focus on the very subtle things that make the framework nicer to use and understand, On just making the core capabilities better and more reliable and performant, and only very very carefully adding features. &lt;/p&gt;
&lt;p&gt;In an age where so much quality degradation is occurring, it inspires hope that projects like Django can persist as beacons of high quality, held together by a small group and big community of thoughtful, caring individuals. Hopefully this is something we can continue for a long time into the future also!&lt;/p&gt;
&lt;h4 id=&quot;s-you-are-part-of-the-code-of-conduct-working-group-how-is-it-to-work-with-the-working-group-do-you-have-space-available-for-new-members-what-does-it-require-according-to-you&quot;&gt;You are part of the Code of Conduct working group, how is it to work with the working group? Do you have space available for new members? What does it require according to you?&lt;/h4&gt;
&lt;p&gt;Code of Conduct WGs are slightly niche and exposed to a certain kind of work and responsibility. Not to mention that respecting many sensitives and view-points is necessary. It also means having the guts to tell people “that’s not how it’s done here” when it needs to be said. Personally it’s a kind of work I’ve grown to be passionate about. I truly believe having a great culture is at the core of community (and really anything good) and can be a complex balancing act of competing factors and emotions. It’s certainly not the kind of thing everyone is into, but if you are, the WG is looking for more diversity, if nothing else it’s tending slightly older at the moment.&lt;/p&gt;
&lt;p&gt;Having said that: Within all of the open source communities from local to international levels there’s always space for people who are willing to turn up and help!&lt;/p&gt;
&lt;p&gt;Join your local community! Find the parts of community that “speak” to you. Maybe it’s starting a meetup, helping your local conference, running a DjangoGirls. Maybe it’s something engineer-related like finally adding something to an open source library that you’re into, adding some beginner docs somewhere, or engaging with Djangonaut Space. Maybe it’s something online like helping out in forum.djangoproject.com, Reddit or Discord.&lt;/p&gt;
&lt;p&gt;As organisers we have this cheat code for finding new people to invite to help more, it’s called “looking for chair-stackers”, that is people who engage to help in the little ways, such as helping stack chairs at the end of an event or generally pack down, wipe up, carry boxes or put things away. Or online: people who go out of their way to try to understand and chip in to manage extra rules, or answer the unanswered thing that’s been sitting there for a while. Or people who just ask “can I help out with that?” when the organisers seem tired or stressed out. Having people around who help in these ways has huge value and has been the beginning of many people being involved in communities and making life-long friends and connections.&lt;/p&gt;
&lt;p&gt;Now more than ever though, it’s so important to connect to your community. We are stronger, better and healthier when we are connected to and relied on by other people and we have others we can share our experiences with. &lt;/p&gt;
&lt;p&gt;Particularly us computer people tend not to be as good with connecting with other people, but everyone should find their way to get out and connect! It’s sometimes hard but it’s always better.&lt;/p&gt;
&lt;h4 id=&quot;s-you-have-organized-many-djangogirls-in-australia-how-did-you-start-do-you-have-any-advice-for-someone-who-would-like-to-organize-a-djangogirls-event&quot;&gt;You have organized many DjangoGirls in Australia, how did you start? Do you have any advice for someone who would like to organize a DjangoGirls event?&lt;/h4&gt;
&lt;p&gt;In 2014 I was living in Perth, Australia, where Russell Keith Magee is based and we had a budding Python/Django User Group. At one of the meetings news emerged about how Ola and Ola were running this thing called “DjangoGirls” at EuroPython in a few weeks. PyConAU was scheduled a couple of weeks after this. I was like, that’s a great idea, I can absolutely have a go at doing that and emailed them immediately asking if I could copy their materials and plan. We pulled it together with an amazing bunch of people and I think this was technically the 2nd DjangoGirls event ever. In the following years I’ve been involved in many more, including the first North American DjangoGirls. From our Perth series of events a successful organisation was spun off called SheCodes.&lt;/p&gt;
&lt;p&gt;In the more-than-a-decade since then the world has changed so much! Particularly in the tech world. I would say specifically for DjangoGirls events, they are very region specific. My first advice for organising an event in your region is to see if there’s been one previously and reach out to the event organisers, or at least the nearest organisers – I think these days there are few places on earth that haven’t had a DjangoGirls event nearish-by. The resources on the website are actually great for getting going and the international DjangoGirls team are lovely, but also always looking for more help.&lt;/p&gt;
&lt;p&gt;Where I live now, back in the capital, Canberra, we are very well supported for education services. We held a DjangoGirls event a couple of years ago, but for the attendees what emerged was that what we really wanted was just to connect with other technical women.&lt;/p&gt;
&lt;p&gt;Now what has been very successful for us is an ongoing PyLadies/Women’s Software group who meet up regularly and talk about things that matter to our experience. We use the “lean-coffee” model and it’s been unexpectedly functional. This has been one of the best groups I’ve ever been in with a range of technical women regularly sharing our weird and statistically unusual experiences together, it feeds the soul, and is strongly recommended if you don’t participate in a group like this already.&lt;/p&gt;
&lt;h4 id=&quot;s-is-there-anything-else-youd-like-to-say&quot;&gt;Is there anything else you’d like to say?&lt;/h4&gt;
&lt;p&gt;A final shout out to the original leaders of the Django community, for me personally Russell, Jeff, Jacob, Andrew and Baptiste in particular, but everyone who has persisted over the years in just turning up over the long haul and keeping our part of the world as beautiful as can be. My friends Dave, Matt and Jonah. Thibaud is a great president right now. Rarely is there a dedicated Django person who is not absolutely delightful and I feel both proud and honoured to be part of this community. A big thank you to everyone (especially you Sarah! And all the Sarahs, Natalias, Lillys and Olas) who help to make Django what it is.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Thank you for doing the interview, Elena !&lt;/strong&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 17:09:45 +0000</pubDate>
</item>
<item>
	<title>Python Insider: Python 3.14.0 beta 3 is here!</title>
	<guid>https://pythoninsider.blogspot.com/2025/06/python-3140-beta-3-is-here.html</guid>
	<link>https://pythoninsider.blogspot.com/2025/06/python-3140-beta-3-is-here.html</link>
	<description>&lt;p&gt;It’s 3.14 beta 3!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/release/python-3140b3/&quot; class=&quot;uri&quot;&gt;https://www.python.org/downloads/release/python-3140b3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a beta preview of Python 3.14&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python 3.14 is still in development. This release, 3.14.0b3, is the
third of four planned beta releases.&lt;/p&gt;
&lt;p&gt;Beta release previews are intended to give the wider community the
opportunity to test new features and bug fixes and to prepare their
projects to support the new feature release.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;&lt;em&gt;strongly encourage&lt;/em&gt;&lt;/strong&gt; maintainers of
third-party Python projects to &lt;strong&gt;&lt;em&gt;test with 3.14&lt;/em&gt;&lt;/strong&gt;
during the beta phase and report issues found to &lt;a href=&quot;https://github.com/python/cpython/issues&quot;&gt;the Python bug
tracker&lt;/a&gt; as soon as possible. While the release is planned to be
feature-complete entering the beta phase, it is possible that features
may be modified or, in rare cases, deleted up until the start of the
release candidate phase (Tuesday 2025-07-22). Our goal is to have
&lt;strong&gt;&lt;em&gt;no ABI changes&lt;/em&gt;&lt;/strong&gt; after beta 4 and as few code
changes as possible after the first release candidate. To achieve that,
it will be &lt;strong&gt;&lt;em&gt;extremely important&lt;/em&gt;&lt;/strong&gt; to get as much
exposure for 3.14 as possible during the beta phase.&lt;/p&gt;
&lt;p&gt;This includes creating pre-release wheels for 3.14, as it helps other
projects to do their own testing. However, we recommend that your
regular production releases wait until 3.14.0rc1, to avoid the risk of
ABI breaks.&lt;/p&gt;
&lt;p&gt;Please keep in mind that this is a preview release and its use is
&lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; recommended for production
environments.&lt;/p&gt;
&lt;h1 id=&quot;major-new-features-of-the-3.14-series-compared-to-3.13&quot;&gt;Major
new features of the 3.14 series, compared to 3.13&lt;/h1&gt;
&lt;p&gt;Some of the major new features and changes in Python 3.14 are:&lt;/p&gt;
&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note that PEPs &lt;a href=&quot;https://discuss.python.org/t/pep-734-multiple-interpreters-in-the-stdlib/41147/36&quot;&gt;734&lt;/a&gt;
and &lt;a href=&quot;https://discuss.python.org/t/pep-779-criteria-for-supported-status-for-free-threaded-python/84319/123&quot;&gt;779&lt;/a&gt;
are exceptionally new in beta 3!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep779&quot;&gt;PEP
779&lt;/a&gt;: Free-threaded Python is officially supported&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep649&quot;&gt;PEP
649&lt;/a&gt;: The evaluation of type annotations is now deferred, improving
the semantics of using annotations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep750&quot;&gt;PEP
750&lt;/a&gt;: Template string literals (t-strings) for custom string
processing, using the familiar syntax of f-strings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep734&quot;&gt;PEP
734&lt;/a&gt;: Multiple interpreters in the stdlib.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep784&quot;&gt;PEP
784&lt;/a&gt;: A new module &lt;code&gt;compression.zstd&lt;/code&gt; providing support
for the Zstandard compression algorithm.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep758&quot;&gt;PEP
758&lt;/a&gt;: &lt;code&gt;except&lt;/code&gt; and &lt;code&gt;except*&lt;/code&gt; expressions may
now omit the brackets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pyrepl-highlighting&quot;&gt;Syntax
highlighting in PyREPL&lt;/a&gt;, and support for color in &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-color-unittest&quot;&gt;unittest&lt;/a&gt;,
&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-color-argparse&quot;&gt;argparse&lt;/a&gt;,
&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-color-json&quot;&gt;json&lt;/a&gt;
and &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-color-calendar&quot;&gt;calendar&lt;/a&gt;
CLIs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep768&quot;&gt;PEP
768&lt;/a&gt;: A zero-overhead external debugger interface for CPython.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#uuid&quot;&gt;UUID
versions 6-8&lt;/a&gt; are now supported by the &lt;code&gt;uuid&lt;/code&gt; module, and
generation of versions 3-5 and 8 are up to 40% faster.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep765&quot;&gt;PEP
765&lt;/a&gt;: Disallow
&lt;code&gt;return&lt;/code&gt;/&lt;code&gt;break&lt;/code&gt;/&lt;code&gt;continue&lt;/code&gt; that exit a
&lt;code&gt;finally&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep741&quot;&gt;PEP
741&lt;/a&gt;: An improved C API for configuring Python.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-tail-call&quot;&gt;new
type of interpreter&lt;/a&gt;. For certain newer compilers, this interpreter
provides significantly better performance. Opt-in for now, requires
building from source.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#improved-error-messages&quot;&gt;Improved
error messages.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#hmac&quot;&gt;Builtin
implementation of HMAC&lt;/a&gt; with formally verified code from the HACL*
project.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#asyncio-introspection-capabilities&quot;&gt;new
command-line interface&lt;/a&gt; to inspect running Python processes using
asynchronous tasks.&lt;/li&gt;
&lt;li&gt;The pdb module now supports &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#remote-attaching-to-a-running-python-process-with-pdb&quot;&gt;remote
attaching to a running Python process&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;(Hey, &lt;strong&gt;fellow core developer,&lt;/strong&gt; if a feature you
find important is missing from this list, let Hugo know.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;For more details on the changes to Python 3.14, see &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html&quot;&gt;What’s new in
Python 3.14&lt;/a&gt;. The next pre-release of Python 3.14 will be the final
beta, 3.14.0b4, scheduled for 2025-07-08.&lt;/p&gt;
&lt;h2 id=&quot;build-changes&quot;&gt;Build changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep761&quot;&gt;PEP
761&lt;/a&gt;: Python 3.14 and onwards no longer provides PGP signatures for
release artifacts. Instead, Sigstore is recommended for verifiers.&lt;/li&gt;
&lt;li&gt;Official macOS and Windows release binaries include an &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-jit-compiler&quot;&gt;&lt;em&gt;experimental&lt;/em&gt;
JIT compiler&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;incompatible-changes-removals-and-new-deprecations&quot;&gt;Incompatible
changes, removals and new deprecations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#incompatible-changes&quot;&gt;Incompatible
changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#removed&quot;&gt;removals&lt;/a&gt;
and &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#deprecated&quot;&gt;deprecations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C API &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#c-api-removed&quot;&gt;removals&lt;/a&gt;
and &lt;a href=&quot;https://docs.python.org/3.14/whatsnew/3.14.html#c-api-deprecated&quot;&gt;deprecations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Overview of all &lt;a href=&quot;https://docs.python.org/3.14/deprecations/index.html&quot;&gt;pending
deprecations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;python-install-manager&quot;&gt;Python install manager&lt;/h1&gt;
&lt;p&gt;The installer we offer for Windows is being replaced by our new
install manager, which can be installed from &lt;a href=&quot;https://apps.microsoft.com/detail/9NQ7512CXL7T&quot;&gt;the Windows
Store&lt;/a&gt; or &lt;a href=&quot;https://www.python.org/ftp/python/pymanager/&quot;&gt;our
FTP page&lt;/a&gt;. See &lt;a href=&quot;https://docs.python.org/3.14/using/windows.html&quot;&gt;our
documentation&lt;/a&gt; for more information. The JSON file available for
download below contains the list of all the installable packages
available as part of this release, including file URLs and hashes, but
is not required to install the latest release. The traditional installer
will remain available throughout the 3.14 and 3.15 releases.&lt;/p&gt;
&lt;h1 id=&quot;more-resources&quot;&gt;More resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.14/&quot;&gt;Online
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0745/&quot;&gt;PEP 745&lt;/a&gt;, 3.14
Release Schedule&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&quot;https://github.com/python/cpython/issues&quot;&gt;github.com/python/cpython/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/donations/&quot;&gt;Help fund Python and
its community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;and-now-for-something-completely-different&quot;&gt;And now for
something completely different&lt;/h1&gt;
&lt;p&gt;If you’re heading out to sea, remember the &lt;a href=&quot;https://xkcd.com/3023/&quot;&gt;Maritime Approximation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;π&lt;/em&gt; mph = &lt;em&gt;e&lt;/em&gt; knots&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;enjoy-the-new-release&quot;&gt;Enjoy the new release&lt;/h1&gt;
&lt;p&gt;Thanks to all of the many volunteers who help make Python Development
and these releases possible! Please consider supporting our efforts by
volunteering yourself or through organisation contributions to the &lt;a href=&quot;https://www.python.org/psf-landing/&quot;&gt;Python Software
Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regards from sunny Helsinki with 19 hours of daylight,&lt;/p&gt;
&lt;p&gt;Your release team, 
  &lt;br /&gt;Hugo van Kemenade
  &lt;br /&gt;Ned Deily
  &lt;br /&gt;Steve Dower
  &lt;br /&gt;Łukasz Langa
&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 14:43:44 +0000</pubDate>
</item>
<item>
	<title>Real Python: Exploring Python's list Data Type With Examples</title>
	<guid>https://realpython.com/courses/list-data-type-with-examples/</guid>
	<link>https://realpython.com/courses/list-data-type-with-examples/</link>
	<description>&lt;p&gt;The &lt;strong&gt;&lt;code&gt;list&lt;/code&gt;&lt;/strong&gt; class is a fundamental &lt;strong&gt;built-in data type&lt;/strong&gt; in Python. It has an impressive and useful set of features, allowing you to efficiently organize and manipulate heterogeneous data. Knowing how to use lists is a must-have skill for you as a Python developer. Lists have many use cases, so you&amp;rsquo;ll frequently reach for them in real-world coding.&lt;/p&gt;
&lt;p&gt;By working through this video course, you&amp;rsquo;ll dive deep into lists and get a solid understanding of their key features. This knowledge will allow you to write more effective code by taking advantage of lists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this video course, you&amp;rsquo;ll learn how to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; new lists in Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt; the items in an existing list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt;, &lt;strong&gt;grow&lt;/strong&gt;, &lt;strong&gt;shrink&lt;/strong&gt;, and &lt;strong&gt;concatenate&lt;/strong&gt; existing lists&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sort&lt;/strong&gt;, &lt;strong&gt;reverse&lt;/strong&gt;, and &lt;strong&gt;traverse&lt;/strong&gt; existing lists&lt;/li&gt;
&lt;li&gt;Use other &lt;strong&gt;features&lt;/strong&gt; of Python lists&lt;/li&gt;
&lt;/ul&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Python 201 – All About the TypedDict</title>
	<guid>https://www.blog.pythonlibrary.org/2025/06/17/python-201-all-about-the-typeddict/</guid>
	<link>https://www.blog.pythonlibrary.org/2025/06/17/python-201-all-about-the-typeddict/</link>
	<description>&lt;p&gt;Python has supported the concept of type hinting for quite a while now. However, unlike other programming languages, Python does not enforce type hints. You must use an external tool, such as Mypy, for that.&lt;/p&gt;
&lt;p&gt;In this tutorial, you will learn all about &lt;a href=&quot;https://peps.python.org/pep-0589/&quot;&gt;&lt;strong&gt;TypedDict&lt;/strong&gt;&lt;/a&gt;, a special way of adding type hinting to &lt;strong&gt;Heterogeneous dictionaries&lt;/strong&gt;. A heterogeneous dictionary is a dictionary that has values that are not all the same type.&lt;/p&gt;
&lt;p&gt;But before you learn how to use the TypedDict, you should review how to type hint a regular dictionary.&lt;/p&gt;
&lt;h2&gt;Type Hinting a Regular Dictionary&lt;/h2&gt;
&lt;p&gt;A regular Python dictionary is defined as follows:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;my_dictionary = {&quot;some_key&quot;: &quot;some_value&quot;}&lt;/pre&gt;
&lt;p&gt;You can use any hashable type for the key, such as a string or an integer. The value of a dictionary can be any type whatsoever.&lt;/p&gt;
&lt;p&gt;When you want to type hint a dictionary, you would use the following: &lt;strong&gt;dict[key_type, value_type]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s apply that to the example above:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;my_dictionary: dict[str, str] = {&quot;some_key&quot;: &quot;some_value&quot;}&lt;/pre&gt;
&lt;p&gt;If you are using a version of Python before 3.9, you will need to do the following instead:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;from typing import Dict

my_dictionary: Dict[str, str] = {&quot;some_key&quot;: &quot;some_value&quot;}&lt;/pre&gt;
&lt;p&gt;Fortunately, modern Python no longer requires that extra import.&lt;/p&gt;
&lt;p&gt;Now you&amp;#8217;re ready to learn about how and why you might want to use the TypedDict&lt;/p&gt;
&lt;h2&gt;Creating a TypedDict&lt;/h2&gt;
&lt;p&gt;The TypedDict was introduced to Python in 3.8. You can read the full details about it in &lt;a href=&quot;https://peps.python.org/pep-0589/&quot;&gt;PEP 589&lt;/a&gt;. The reason you would use a TypedDict over a regular dictionary is when you have a dictionary with values of different types.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;my_dictionary = {&quot;names&quot;: [&quot;Mike&quot;, &quot;Andrea&quot;, &quot;John&quot;],
                 &quot;type&quot;: &quot;employee&quot;,
                 &quot;code&quot;: 123456
                }&lt;/pre&gt;
&lt;p&gt;Type hinting this type of dictionary is more complex. You can do something like this, though:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;my_dictionary: dict[str, list | str | int] = {&quot;names&quot;: [&quot;Mike&quot;, &quot;Andrea&quot;, &quot;John&quot;], &quot;otype&quot;: &quot;employee&quot;, &quot;code&quot;: 123456 }&lt;/pre&gt;
&lt;p&gt;Depending on how your type checker is configured, this might work. However, if you write code that modifies the list, your type checker may complain that a string doesn&amp;#8217;t have an append method or vice versa.&lt;/p&gt;
&lt;p&gt;To make the type checker happier, you should use a &lt;strong&gt;TypedDict&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s how you would use one with this example:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;from typing import TypedDict

class MultiTypeDict(TypedDict):
    names: list
    otype: str
    code: int

my_dictionary: MultiTypeDict = {&quot;names&quot;: [&quot;Mike&quot;, &quot;Andrea&quot;, &quot;John&quot;], &quot;otype&quot;: &quot;employee&quot;, &quot;code&quot;: 123456 }&lt;/pre&gt;
&lt;p&gt;Isn&amp;#8217;t that great? There&amp;#8217;s just one problem. What if your dictionary&amp;#8217;s keys have spaces in them? You cannot create class attributes with spaces!&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a workaround for that. Check it out in the next section.&lt;/p&gt;
&lt;h2&gt;Creating a TypedDict with Keys that Have Spaces&lt;/h2&gt;
&lt;p&gt;For this example, you will create a new dictionary with four keys, three of which contain spaces.&lt;/p&gt;
&lt;p&gt;To make a TypedDict for this type of dictionary, you need to call the TypedDict constructor instead of subclassing it:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;from typing import TypedDict

Results = TypedDict(&quot;Results&quot;,{&quot;Animal Habitats&quot;: list,
                               &quot;Tested&quot;: bool,
                               &quot;Animal Name&quot;: str,
                               &quot;Animal Location&quot;: str})

actual_results: Results = {
    &quot;Animal Habitats&quot;: [&quot;Asia&quot;, &quot;N. America&quot;],
    &quot;Tested&quot;: False,
    &quot;Animal Name&quot;: &quot;Tigris&quot;,
    &quot;Animal Location&quot;: &quot;North Bay&quot;,
}&lt;/pre&gt;
&lt;p&gt;When you call TypedDict, you pass in the typename (what you would have named the class) and the fields the dictionary should have. You&amp;#8217;ll note that the fields are a dictionary. This is where you will put the keys that contain spaces and those without spaces.&lt;/p&gt;
&lt;p&gt;Give it a try and you&amp;#8217;ll find it works great!&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TypedDict&lt;/strong&gt; is a handy tool for storing a complex dictionary. You will find that sometimes you even have these complex dictionaries inside of lists, tuples or even other dictionaries. Using the TypedDict can make type-hinting these data structures easier and prevent hard-to-detect defects from creeping in.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.blog.pythonlibrary.org/2025/06/17/python-201-all-about-the-typeddict/&quot;&gt;Python 201 &amp;#8211; All About the TypedDict&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;Mouse Vs Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 13:25:53 +0000</pubDate>
</item>
<item>
	<title>Python Software Foundation: The PSF's 2024 Annual Impact Report is here!</title>
	<guid>https://pyfound.blogspot.com/2025/06/the-psfs-2024-annual-impact-report-is.html</guid>
	<link>https://pyfound.blogspot.com/2025/06/the-psfs-2024-annual-impact-report-is.html</link>
	<description>&lt;p&gt;2024 was another remarkable year of growth for the Python Software Foundation! Python became the most popular language on GitHub, and worldwide community engagement was at an all-time high. We expanded our impact by welcoming our inaugural PyPI Support Specialist, Maria Ashna, the revival of the User Success and Education and Outreach Workgroups, and continued investment in grants, infrastructure, and accessibility. We’ve captured some of the key numbers, details, and information in our &lt;a href=&quot;https://www.python.org/psf/annual-report/2024&quot; target=&quot;_blank&quot;&gt;latest Annual Impact Report&lt;/a&gt;.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;Some highlights of what you’ll find in the report include:&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A letter from our Executive Director, Deb Nicholson&lt;/li&gt;&lt;li&gt;Notes from our &lt;a href=&quot;https://us.pycon.org/2025/&quot; target=&quot;_blank&quot;&gt;PyCon US 2025&lt;/a&gt; Chair and Co-Chair, Elaine Wong and Jon Bonafato, and PSF Board of Directors Chair, Dawn Wages&lt;/li&gt;&lt;li&gt;Updates on the achievements and activities of our &lt;a href=&quot;https://www.python.org/psf/developersinresidence/&quot; target=&quot;_blank&quot;&gt;Developers-in-Residence&lt;/a&gt;: Łukasz Langa, Petr Vicktorin, Serhiy Storchaka, and Seth Larson&lt;/li&gt;&lt;li&gt;An overview of &lt;a href=&quot;https://pypi.org/&quot; target=&quot;_blank&quot;&gt;PyPI&lt;/a&gt; in 2024, including:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Impressive and ever-growing stats&lt;/li&gt;&lt;li&gt;An overview of the work and accomplishments of our PyPI Safety &amp;amp; Security Engineer, Mike Fiedler&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;A celebration and summary of &lt;a href=&quot;https://us.pycon.org/2024/&quot; target=&quot;_blank&quot;&gt;PyCon US 2024&lt;/a&gt;&lt;/li&gt;&lt;li&gt;A highlight of our &lt;a href=&quot;https://www.python.org/psf/fiscal-sponsorees/&quot; target=&quot;_blank&quot;&gt;20 amazing Fiscal Sponsorees&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/sponsors/&quot; target=&quot;_blank&quot;&gt;Sponsors&lt;/a&gt; who generously supported our work and the Python ecosystem&lt;/li&gt;&lt;li&gt;An overview of PSF Financials, including a consolidated financial statement and grants data&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We hope you check out &lt;a href=&quot;https://www.python.org/psf/annual-report/2024&quot; target=&quot;_blank&quot;&gt;the report&lt;/a&gt;, share it with your Python friends, and let us know what you think! Find us on social media (&lt;a href=&quot;https://fosstodon.org/@ThePSF&quot; target=&quot;_blank&quot;&gt;Mastodon&lt;/a&gt;, &lt;a href=&quot;https://bsky.app/profile/python.org&quot; target=&quot;_blank&quot;&gt;Bluesky&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ThePSF&quot; target=&quot;_blank&quot;&gt;X&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/company/thepsf/&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;), or share your thoughts on the Python Discuss thread.&amp;nbsp;&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 08:25:44 +0000</pubDate>
</item>
<item>
	<title>Armin Ronacher: We Can Just Measure Things</title>
	<guid>http://lucumr.pocoo.org/2025/6/17/measuring</guid>
	<link>http://lucumr.pocoo.org/2025/6/17/measuring</link>
	<description>&lt;p&gt;This week I spent time with friends to letting agents go wild
and see &lt;a class=&quot;reference external&quot; href=&quot;https://vibetunnel.sh/&quot;&gt;what we could build in 24 hours&lt;/a&gt;.  I
took some notes for myself to reflect on that experience.  I won't bore
you with another vibecoding post, but you can read &lt;a class=&quot;reference external&quot; href=&quot;https://steipete.me/posts/2025/vibetunnel-turn-any-browser-into-your-mac-terminal&quot;&gt;Peter's post&lt;/a&gt;
about how that went.&lt;/p&gt;
&lt;p&gt;As fun as it was, it also was frustrating in other ways and in entire
predictable ways.  It became a meme about how much I hated working with
Xcode for this project.  This got me thinking quite a bit more that this
has been an entirely unacceptable experience for a long time, but with
programming agents, the pain becomes measurable.&lt;/p&gt;
&lt;p&gt;When I first dove into programming I found the idea of &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/RTFM&quot;&gt;RTFM&lt;/a&gt; quite hilarious.  “Why are you
asking dumb questions, just read it up.”  The unfortunate reality is that
the manual often doesn't exist — or is wrong.  In fact, we as engineers
are quite willing to subject each others to completely inadequate tooling,
bad or missing documentation and ridiculous API footguns all the time.
“User error” is what we used to call this, nowadays it's a “skill issue”.
It puts the blame on the user and absolves the creator, at least
momentarily.  For APIs it can be random crashes if you use a function
wrong, for programs it can be impossible to navigate UI or lack of error
messages.  There are many different ways in which we humans get stuck.&lt;/p&gt;
&lt;p&gt;What agents change about this is, is that I can subject them to something
I wouldn't really want to subject other developers to: measuring.  I
picked the language for my current project by running basic evals and it
worked well.  I learned from that, that there are objectively better and
worse language when it comes to my particular problem.  The choice however
is not just how much the AI knows about the language from the corpus of
examples during training.  It's also tooling, the inherent capabilities
of the language, ecosystem churn and other aspects.&lt;/p&gt;
&lt;p&gt;Using agents to measure code quality is great because agents don't judge
me, but they do judge the code they are writing.  Not all agents will
swear, but they will &lt;a class=&quot;reference external&quot; href=&quot;https://x.com/ankrgyl/status/1934415308800053485&quot;&gt;express frustration with libraries&lt;/a&gt; when loops don't go
well or give up.  That opens up an opportunity to bring some measurements
into not agent performance, but the health of a project.&lt;/p&gt;
&lt;p&gt;We should pay more attention to how healthy engineering teams are, and
that starts with the code base.  Using agents we can put some numbers to
it in which we cannot do with humans (or in a very slow and expensive
way).  We can figure out how successful agents are in using the things are
are creating in rather objective ways which is in many ways a proxy for
how humans experience working with the code.  Getting together with fresh
souls to walk them through a tutorial or some tasks is laborious and
expensive.  Getting agents that have never seen a codebase start using a
library is repeatable, rather cheap, fast and if set up the right way very
objective.  It also takes the emotion out of it or running the experiment
multiple times.&lt;/p&gt;
&lt;p&gt;Now obviously we can have debates over if the type of code we would write
with an agent is objectively beautiful or if the way agents execute tools
creates the right type of tools.  This is a debate worth having.  Right at
this very moment though what programming agents need to be successful is
rather well aligned with what humans need.&lt;/p&gt;
&lt;p&gt;So what works better than other things?  For now these are basic
indicators, for agents and humans alike:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Good test coverage:&lt;/strong&gt; they help with future code writing but they also
greatly help preventing regressions.  Hopefully no surprise to anyone.
I would add though that this is not just for the tests, but also for
examples and small tools that a user and agent can run to validate
behavior manually.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good error reporting:&lt;/strong&gt; a compiler, tool or an API that does not
provide good error reporting is a bad tool.  I have been harping on this
for years when working at Sentry, but with agents it becomes even
clearer that this investment pays off.  It also means errors should be
where they can be found.  If errors are hidden in an obscure log neither
human nor agent will find it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High ecosystem stability:&lt;/strong&gt; if your ecosystem churns a lot, if APIs keep
changing you will not just upset humans, you will also slow down the
agent.  It will find outdated docs, examples and patterns and it will
slow down / write bad code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Few superfluous abstractions:&lt;/strong&gt; too many layers just make data flow and
refactoring expensive.  We might even want to start questioning the
value proposition of (most) ORMs today because of how much harder they
make things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything needs to be fast and user friendly:&lt;/strong&gt; The quicker tools
respond (and the less useless output they produce) the better.
Crashes are tolerable; hangs are problematic.  &lt;cite&gt;uv&lt;/cite&gt; for instance is a
much better experience in Python than any of the rest of the ecosystem,
even though most of the ecosystem points at &lt;cite&gt;pip&lt;/cite&gt;.  Agents are super
happy to use and keep using &lt;cite&gt;uv&lt;/cite&gt; because they get good infos out of it,
and low failure rates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A good dev environment:&lt;/strong&gt; If stuff only reproduces in CI you have to move
your agent into CI.  That's not a good experience.  Give your agent a
way to run Docker locally.  If you write a backend, make sure there is a
database to access and introspect, don't just mock it out (badly).
Deferring things into a CI flow is not an option.  It's also important
that it's clear when the devenv is broken vs the code is broken.  For
both human and agent it can be hard to distinguish this if the tooling
is not set up correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When an agent struggles, so does a human.  There is a lot of code and
tooling out there which is objectively not good, but because of one reason
or another became dominant.  If you want to start paying attention to
technology choices or you want to start writing your own libraries, now
you can use agents to evaluate the developer experience.&lt;/p&gt;
&lt;p&gt;Because so can your users.  I can confidently say it's not just me that
does not like Xcode, my agent also expresses frustration — measurably so.&lt;/p&gt;</description>
	<pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Python Engineering at Microsoft: Python in Visual Studio Code – June 2025 Release</title>
	<guid>https://devblogs.microsoft.com/python/python-in-visual-studio-code-june-2025-release/</guid>
	<link>https://devblogs.microsoft.com/python/python-in-visual-studio-code-june-2025-release/</link>
	<description>&lt;p&gt;We&amp;#8217;re excited to announce the June 2025 release of the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance&quot;&gt;Pylance&lt;/a&gt; and &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter&quot;&gt;Jupyter&lt;/a&gt; extensions for Visual Studio Code!&lt;/p&gt;
&lt;p&gt;This release includes the following announcements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python chat tools&lt;/li&gt;
&lt;li&gt;Language Server based terminal suggest in the Python REPL&lt;/li&gt;
&lt;li&gt;Create Project from a template in the Python Environments extension&lt;/li&gt;
&lt;li&gt;PyEnv and Poetry support in the Python Environments extension&lt;/li&gt;
&lt;li&gt;Controlled rollout of the Python Environments extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;re interested, you can check the full list of improvements in our changelogs for the &lt;a href=&quot;https://github.com/microsoft/vscode-python/releases&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://code.visualstudio.com/updates/&quot;&gt;Jupyter&lt;/a&gt; and &lt;a href=&quot;https://github.com/microsoft/pylance-release/blob/main/CHANGELOG.md&quot;&gt;Pylance&lt;/a&gt; extensions.&lt;/p&gt;
&lt;h2&gt;Python chat tools&lt;/h2&gt;
&lt;p&gt;The Python extension now includes the following chat tools: “Get information for a Python Environment”, “Get executable information for a Python Environment”, “Install Python Package” and “Configure Python Environment”. You can either directly reference them in your prompt by adding &lt;code&gt;#getPythonEnvironmentInfo&lt;/code&gt; and &lt;code&gt;#installPythonPackage&lt;/code&gt;, or agent mode will automatically call the tool as applicable based on your prompt. These tools seamlessly detect appropriate environment information, based on file or workspace context, and handle package installation with accurate environment resolution.&lt;/p&gt;
&lt;p&gt;The “Configure Python Environment” tool ensures that the Python environment is set up correctly for the workspace. This includes creating a virtual environment if needed, and selecting it as the active Python environment for your workspace.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;wp-video&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script&gt;document.createElement('video');&lt;/script&gt;&lt;![endif]--&gt;
&lt;a href=&quot;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/python-tools.mp4&quot;&gt;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/python-tools.mp4&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Tools that were previously introduced in the Python Environments extension (preview) have been migrated to the Python extension, thereby making these tools available to all users with the Python extension installed.&lt;/p&gt;
&lt;h1&gt;Language Server based terminal suggest in the Python REPL&lt;/h1&gt;
&lt;p&gt;Language server completions are now available in the terminal for interactive Python REPL sessions. This brings the same language completions you receive in the editor, now inside the terminal making terminal interactions more efficient.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;wp-video&quot;&gt;&lt;a href=&quot;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/lsp_completions.mp4&quot;&gt;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/lsp_completions.mp4&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;To try it out, ensure the following settings are enabled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setting(terminal.integrated.shellIntegration.enabled:true)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setting(python.terminal.shellIntegration.enabled:true)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setting(terminal.integrated.suggest.enabled:true)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setting(python.analysis.supportAllPythonDocuments:true)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Create Project from a template in the Python Environments extension&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs&quot;&gt;Python Environments extension&lt;/a&gt; (preview) now supports project creation for Python packages and basic scripts, allowing you to bypass scaffolding and get coding more quickly. Use the &lt;strong&gt;Python Envs: Create Project from Template&lt;/strong&gt; command in the Command Palette to select whether you want to create a package or a script and let the command handle the rest!&lt;/p&gt;
&lt;p&gt;For package creation, you can expect to name the package, create a virtual environment, and receive a scaffolded project which includes a tests subfolder, &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;dev-requirements.txt&lt;/code&gt;, and boilerplate &lt;code&gt;__main__.py&lt;/code&gt; and &lt;code&gt;__init__.py&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;For scripts, a new Python file with the name of your choice and boilerplate code will be created.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;wp-video&quot;&gt;&lt;a href=&quot;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/project_creation.mp4&quot;&gt;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/project_creation.mp4&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h1&gt;PyEnv and Poetry support in the Python Environments extension&lt;/h1&gt;
&lt;p&gt;We added support for pyenv for environment management, and poetry for both package and environment management in the Python Environments extension. This ensures you can manage pyenv and poetry environments as your normally would in the support UI contributed by the Python Environments extension. When pyenv or poetry are installed on your machine, they will appear as support environment managers in the Python panel accessed in the Activity Bar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/env_managers.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-10067&quot; src=&quot;https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2025/06/env_managers.png&quot; alt=&quot;Screenshot showing various environment managers in the Python environments view.&quot; width=&quot;700&quot; height=&quot;1044&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Controlled rollout of the Python Environments extension&lt;/h1&gt;
&lt;p&gt;We’re starting to roll-out the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs&quot;&gt;Python Environments extension&lt;/a&gt; as an optional dependency with the Python extension beginning with a subset of pre-release users this month. What this means is you may now begin seeing the Python Environments extension automatically installed along side the Python extension, similar to the Python Debugger and Pylance extensions. This controlled rollout allows us to gather early feedback and ensure reliability before general availability. The Python Environments extension includes all the core capabilities we’ve introduced so far including: Quick Create for &lt;a href=&quot;https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2025-release/#python-environments-quick-create-command&quot;&gt;one-click environment setup using Quick Create&lt;/a&gt;, &lt;a href=&quot;https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2025-release/#automatic-environment-activation-with-python-environments-(experimental)&quot;&gt;automatic terminal activation&lt;/a&gt; (via &lt;code&gt;&quot;python-envs.terminal.autoActivationType&quot;&lt;/code&gt; setting), and all supported &lt;a href=&quot;https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2024-release/&quot;&gt;UI for environment an package management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install the preview version of the Python Environments extension from the Extension Marketplace if you would like to try it out. Please let us know if there are any issues or feature requests via our &lt;a href=&quot;https://github.com/microsoft/vscode-python-environments&quot;&gt;vscode-python-environments&lt;/a&gt; repo.&lt;/p&gt;
&lt;h2&gt;We would also like to extend special thanks to this month&amp;#8217;s contributors:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dineshcsdev&quot;&gt;@dineshcsdev&lt;/a&gt; Added &lt;code&gt;shortTitle&lt;/code&gt; to &lt;code&gt;execSelectionInTerminal&lt;/code&gt; command in &lt;a href=&quot;https://github.com/microsoft/vscode-python/pull/25007&quot;&gt;vscode-python#25007&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/albus-droid&quot;&gt;@albus-droid&lt;/a&gt; Added pylock to activation events in &lt;a href=&quot;https://github.com/microsoft/vscode-python/pull/25025&quot;&gt;vscode-python#25025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s-kai273&quot;&gt;@s-kai273&lt;/a&gt; Fixed env error handling in &lt;a href=&quot;https://github.com/microsoft/vscode-python/pull/25049&quot;&gt;vscode-python#25049&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kycutler&quot;&gt;@kycutler&lt;/a&gt; Fix&lt;a href=&quot;https://github.com/kycutler&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;&lt;span&gt; from trying to read directory &lt;/span&gt;in &lt;a href=&quot;https://github.com/microsoft/vscode-python-debugger/pull/692&quot;&gt;vscode-python-debugger#692&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try out these new improvements by downloading the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;Python extension&lt;/a&gt; and the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter&quot;&gt;Jupyter extension&lt;/a&gt; from the Marketplace, or install them directly from the extensions view in Visual Studio Code (Ctrl + Shift + X or ⌘ + ⇧ + X). You can learn more about &lt;a href=&quot;https://code.visualstudio.com/docs/python/python-tutorial&quot;&gt;Python support in Visual Studio Code&lt;/a&gt; in the documentation. If you run into any problems or have suggestions, &lt;a href=&quot;https://github.com/microsoft/vscode-python/issues/new/choose&quot;&gt;please file an issue&lt;/a&gt; on the &lt;a href=&quot;https://github.com/Microsoft/vscode-python&quot;&gt;Python VS Code GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://devblogs.microsoft.com/python/python-in-visual-studio-code-june-2025-release/&quot;&gt;Python in Visual Studio Code &amp;#8211; June 2025 Release&lt;/a&gt; appeared first on &lt;a href=&quot;https://devblogs.microsoft.com/python&quot;&gt;Microsoft for Python Developers Blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 16 Jun 2025 16:38:52 +0000</pubDate>
</item>
<item>
	<title>Real Python: Write Pythonic and Clean Code With namedtuple</title>
	<guid>https://realpython.com/python-namedtuple/</guid>
	<link>https://realpython.com/python-namedtuple/</link>
	<description>&lt;div&gt;&lt;p&gt;Python’s &lt;code&gt;namedtuple&lt;/code&gt; in the &lt;code&gt;collections&lt;/code&gt; module allows you to create immutable sequences with named fields, providing a more readable and Pythonic way to handle tuples. You use &lt;code&gt;namedtuple&lt;/code&gt; to access values with descriptive field names and dot notation, which improves code clarity and maintainability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By the end of this tutorial, you’ll understand that:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python’s &lt;strong&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/strong&gt; is a &lt;strong&gt;factory function&lt;/strong&gt; that creates tuple subclasses with named fields.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;main difference&lt;/strong&gt; between &lt;code&gt;tuple&lt;/code&gt; and &lt;code&gt;namedtuple&lt;/code&gt; is that &lt;code&gt;namedtuple&lt;/code&gt; allows attribute access via &lt;strong&gt;named fields&lt;/strong&gt;, enhancing readability.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;point of using &lt;code&gt;namedtuple&lt;/code&gt;&lt;/strong&gt; is to improve code clarity by allowing access to elements through descriptive names instead of integer indices.&lt;/li&gt;
&lt;li&gt;Some &lt;strong&gt;alternatives&lt;/strong&gt; to &lt;code&gt;namedtuple&lt;/code&gt; include dictionaries, data classes, and &lt;code&gt;typing.NamedTuple&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dive deeper into creating &lt;code&gt;namedtuple&lt;/code&gt; classes, exploring their powerful features, and writing Python code that’s easier to read and maintain.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Get Your Code:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/bonus/python-namedtuple-code/&quot; class=&quot;alert-link&quot;&gt;Click here to download the free sample code&lt;/a&gt; that shows you how to use namedtuple to write Pythonic and clean code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;container border rounded text-wrap-pretty my-3&quot;&gt;

  &lt;p class=&quot;my-3&quot;&gt;&lt;strong&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt; Take the Quiz:&lt;/strong&gt; Test your knowledge with our interactive “Write Pythonic and Clean Code With namedtuple” quiz. You’ll receive a score upon completion to help you track your learning progress:&lt;/p&gt;

  &lt;hr /&gt;

  &lt;div class=&quot;row my-3&quot;&gt;
    &lt;div class=&quot;col-xs-12 col-sm-4 col-md-3 align-self-center&quot;&gt;

      &lt;a href=&quot;https://realpython.com/quizzes/python-namedtuple/&quot; tabindex=&quot;-1&quot;&gt;
        &lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;

            &lt;img class=&quot;card-img-top m-0 p-0 embed-responsive-item rounded&quot; alt=&quot;Write Pythonic and Clean Code With namedtuple&quot; src=&quot;https://files.realpython.com/media/Clean-Up-Your-Python-Code-With-namedtuple_Watermarked.0ab0ddbda383.jpg&quot; width=&quot;1920&quot; height=&quot;1080&quot; /&gt;


          &lt;div class=&quot;card-img-overlay d-flex align-items-center&quot;&gt;
            &lt;div class=&quot;mx-auto&quot;&gt;
              &lt;span class=&quot;text-light&quot;&gt;&lt;span class=&quot;icon baseline scale2x&quot;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/a&gt;

    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;div class=&quot;mt-3 d-md-none&quot;&gt;&lt;/div&gt; 
      &lt;p class=&quot;small text-muted mb-0&quot;&gt;&lt;strong&gt;Interactive Quiz&lt;/strong&gt;&lt;/p&gt;
      &lt;a href=&quot;https://realpython.com/quizzes/python-namedtuple/&quot; class=&quot;stretched-link&quot;&gt;&lt;span class=&quot;my-0 h4&quot;&gt;Write Pythonic and Clean Code With namedtuple&lt;/span&gt;&lt;/a&gt; 
      &lt;p class=&quot;text-muted mb-0 small&quot;&gt;In this quiz, you'll test your understanding of Python's namedtuple() factory function from the collections module.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&quot;getting-to-know-namedtuple-in-python&quot;&gt;Getting to Know &lt;code&gt;namedtuple&lt;/code&gt; in Python&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#getting-to-know-namedtuple-in-python&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python’s &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple()&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)&quot;&gt;factory function&lt;/a&gt; that’s available in the &lt;a href=&quot;https://docs.python.org/3/library/collections.html#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module. It allows you to create a &lt;a href=&quot;https://realpython.com/python-tuple/&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://realpython.com/ref/glossary/subclass/&quot; class=&quot;ref-link&quot;&gt;subclass&lt;/a&gt; with &lt;strong&gt;named fields&lt;/strong&gt;. These named fields let you to access the values in a given named tuple using &lt;a href=&quot;https://realpython.com/ref/glossary/dot-notation/&quot; class=&quot;ref-link&quot;&gt;&lt;strong&gt;dot notation&lt;/strong&gt;&lt;/a&gt; and field names—for example, &lt;code&gt;my_tuple.field_name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Python’s &lt;code&gt;namedtuple&lt;/code&gt; was created to improve code readability by providing a way to access values using descriptive field names instead of integer indices, which often don’t provide any context on what the values are. This feature also makes the code cleaner and more maintainable.&lt;/p&gt;
&lt;p&gt;In contrast, accessing values by index in a regular tuple can be frustrating, hard to read, and error-prone. This is especially true if the tuple has a lot of fields and is constructed far away from where you’re using it.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this tutorial, you’ll find different terms used to refer to Python’s &lt;code&gt;namedtuple&lt;/code&gt;, its factory function, and its instances.&lt;/p&gt;
&lt;p&gt;To avoid confusion, here’s a summary of how each term is used throughout the tutorial:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;namedtuple()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The factory function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;namedtuple&lt;/code&gt;, &lt;code&gt;namedtuple&lt;/code&gt; class&lt;/td&gt;
&lt;td&gt;The tuple subclass returned by &lt;code&gt;namedtuple()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;namedtuple&lt;/code&gt; instance, named tuple&lt;/td&gt;
&lt;td&gt;An instance of a specific &lt;code&gt;namedtuple&lt;/code&gt; class&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You’ll find these terms used with their corresponding meaning throughout the tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Besides providing named fields, named tuples in Python offer the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are &lt;a href=&quot;https://realpython.com/python-mutable-vs-immutable-types/&quot;&gt;immutable&lt;/a&gt; data structures&lt;/li&gt;
&lt;li&gt;Can have a &lt;a href=&quot;https://docs.python.org/3/library/functions.html#hash&quot;&gt;hash&lt;/a&gt; value and work as &lt;strong&gt;dictionary keys&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Can be stored in &lt;a href=&quot;https://realpython.com/python-sets/&quot;&gt;sets&lt;/a&gt; when they have a hash value&lt;/li&gt;
&lt;li&gt;Generate a basic &lt;a href=&quot;https://realpython.com/documenting-python-code/&quot;&gt;docstring&lt;/a&gt; using the type and field names&lt;/li&gt;
&lt;li&gt;Provide a helpful &lt;a href=&quot;https://realpython.com/ref/glossary/string-representation/&quot; class=&quot;ref-link&quot;&gt;&lt;strong&gt;string representation&lt;/strong&gt;&lt;/a&gt; that displays the tuple content in a &lt;code&gt;name=value&lt;/code&gt; format&lt;/li&gt;
&lt;li&gt;Support &lt;a href=&quot;https://realpython.com/ref/glossary/indexing/&quot; class=&quot;ref-link&quot;&gt;&lt;strong&gt;indexing&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://realpython.com/ref/glossary/slicing/&quot; class=&quot;ref-link&quot;&gt;&lt;strong&gt;slicing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provide additional &lt;a href=&quot;https://realpython.com/ref/glossary/method/&quot; class=&quot;ref-link&quot;&gt;methods&lt;/a&gt; and &lt;a href=&quot;https://realpython.com/ref/glossary/attribute/&quot; class=&quot;ref-link&quot;&gt;attributes&lt;/a&gt;, such as &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.somenamedtuple._make&quot;&gt;&lt;code&gt;._make()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict&quot;&gt;&lt;code&gt;_asdict()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.somenamedtuple._fields&quot;&gt;&lt;code&gt;._fields&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Are &lt;strong&gt;backward compatible&lt;/strong&gt; with regular tuples&lt;/li&gt;
&lt;li&gt;Have &lt;strong&gt;similar memory usage&lt;/strong&gt; to regular tuples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use &lt;code&gt;namedtuple&lt;/code&gt; instances wherever you need a tuple-like object. They offer the added benefit of accessing values using field names and dot notation, which makes your code more readable and Pythonic.&lt;/p&gt;
&lt;p&gt;With this brief introduction to &lt;code&gt;namedtuple&lt;/code&gt; and its general features, you’re ready to explore how to create and use them effectively in your own code.&lt;/p&gt;
&lt;h2 id=&quot;creating-tuple-like-classes-with-the-namedtuple-function&quot;&gt;Creating Tuple-Like Classes With the &lt;code&gt;namedtuple()&lt;/code&gt; Function&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#creating-tuple-like-classes-with-the-namedtuple-function&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You use a &lt;code&gt;namedtuple()&lt;/code&gt; to create an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-immutable&quot;&gt;immutable&lt;/a&gt;, tuple-like &lt;a href=&quot;https://realpython.com/ref/glossary/sequence/&quot; class=&quot;ref-link&quot;&gt;sequence&lt;/a&gt; with named fields. A popular example that you’ll often find in resources about &lt;code&gt;namedtuple&lt;/code&gt; is defining a class to represent a mathematical &lt;a href=&quot;https://en.wikipedia.org/wiki/Point_(geometry)&quot;&gt;point&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Depending on the problem, you’ll probably want to use an immutable data structure to represent your points. Here’s how you can create a two-dimensional point using a regular tuple:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--blue&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Python&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Create a 2D point as a regular tuple&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(2, 4)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Access coordinate x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Access coordinate y&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Try to update a coordinate value&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;'tuple' object does not support item assignment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this example, you create an immutable, two-dimensional &lt;code&gt;point&lt;/code&gt; using a regular tuple. This code works. You have a &lt;code&gt;point&lt;/code&gt; with two coordinates that you can access by index. The point is immutable, so you can’t modify the coordinates. However, do you think this code is readable? Can you tell upfront what the &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; indices mean?&lt;/p&gt;
&lt;p&gt;To improve clarity, you can use a &lt;code&gt;namedtuple&lt;/code&gt; like in the following code. Note that you need to import the function from the &lt;code&gt;collections&lt;/code&gt; module first:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--blue&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Python&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Create a namedtuple type, Point&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Point&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Point(x=2, y=4)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Access the coordinates by field name&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Access the coordinates by index&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;can't set attribute&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you have a &lt;code&gt;Point&lt;/code&gt; class with two appropriately named fields, &lt;code&gt;.x&lt;/code&gt; and &lt;code&gt;.y&lt;/code&gt;. Your &lt;code&gt;point&lt;/code&gt; provides a descriptive string representation by default: &lt;code&gt;Point(x=2, y=4)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can access the coordinates with dot notation and the field names, which is convenient, readable, and explicit. You can also use indices to access each coordinate’s value if you prefer.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As with regular tuples, named tuples are &lt;a href=&quot;https://realpython.com/python-mutable-vs-immutable-types/&quot;&gt;immutable&lt;/a&gt;. However, the values they store don’t necessarily have to be immutable.&lt;/p&gt;
&lt;p&gt;It’s completely valid to create a tuple or a named tuple that holds mutable values:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--blue&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Python&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Timmy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jimmy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Person(name='John Doe', children=['Timmy', 'Jimmy'])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;139695902374144&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tina&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Person(name='John Doe', children=['Timmy', 'Jimmy', 'Tina'])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;139695902374144&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;unhashable type: 'list'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can create named tuples that contain mutable objects. Then, you can modify the mutable objects in the underlying tuple. However, this doesn’t mean that you’re modifying the tuple itself. The tuple will continue being the same object.&lt;/p&gt;
&lt;p&gt;Finally, tuples or named tuples with mutable values aren’t &lt;a href=&quot;https://realpython.com/ref/glossary/hashable/&quot; class=&quot;ref-link&quot;&gt;hashable&lt;/a&gt;, as you saw in the above example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/python-namedtuple/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/python-namedtuple/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 16 Jun 2025 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Python Bytes: #436 Slow tests go last</title>
	<guid>https://pythonbytes.fm/episodes/show/436/slow-tests-go-last</guid>
	<link>https://pythonbytes.fm/episodes/show/436/slow-tests-go-last</link>
	<description>&amp;lt;strong&amp;gt;Topics covered in this episode:&amp;lt;/strong&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;* Free-threaded Python no longer “experimental” as of Python 3.14&amp;lt;/em&amp;gt;*&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://github.com/livingbio/typed-ffmpeg?featured_on=pythonbytes&quot;&amp;gt;typed-ffmpeg&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://github.com/deepankarm/pyleak?featured_on=pythonbytes&quot;&amp;gt;pyleak&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;* &amp;lt;a href=&quot;https://timonweb.com/django/optimizing-test-execution-running-live_server-tests-last-with-pytest/?featured_on=pythonbytes&quot;&amp;gt;Optimizing Test Execution: Running live_server Tests Last with pytest&amp;lt;/a&amp;gt;&amp;lt;/em&amp;gt;*&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Extras&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Joke&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;&amp;lt;a href='https://www.youtube.com/watch?v=Mt7X3Q54lU4' style='font-weight: bold;'data-umami-event=&quot;Livestream-Past&quot; data-umami-event-episode=&quot;436&quot;&amp;gt;Watch on YouTube&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;About the show&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Sponsored by &amp;lt;strong&amp;gt;PropelAuth&amp;lt;/strong&amp;gt;: &amp;lt;a href=&quot;https://pythonbytes.fm/propelauth66&quot;&amp;gt;pythonbytes.fm/propelauth66&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Connect with the hosts&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Michael: &amp;lt;a href=&quot;https://fosstodon.org/@mkennedy&quot;&amp;gt;@mkennedy@fosstodon.org&amp;lt;/a&amp;gt; / &amp;lt;a href=&quot;https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes&quot;&amp;gt;@mkennedy.codes&amp;lt;/a&amp;gt; (bsky)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Brian: &amp;lt;a href=&quot;https://fosstodon.org/@brianokken&quot;&amp;gt;@brianokken@fosstodon.org&amp;lt;/a&amp;gt; / &amp;lt;a href=&quot;https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes&quot;&amp;gt;@brianokken.bsky.social&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Show: &amp;lt;a href=&quot;https://fosstodon.org/@pythonbytes&quot;&amp;gt;@pythonbytes@fosstodon.org&amp;lt;/a&amp;gt; / &amp;lt;a href=&quot;https://bsky.app/profile/pythonbytes.fm&quot;&amp;gt;@pythonbytes.fm&amp;lt;/a&amp;gt; (bsky)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;Join us on YouTube at &amp;lt;a href=&quot;https://pythonbytes.fm/stream/live&quot;&amp;gt;&amp;lt;strong&amp;gt;pythonbytes.fm/live&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; to be part of the audience. Usually &amp;lt;strong&amp;gt;Monday&amp;lt;/strong&amp;gt; at 10am PT. Older video versions available there too.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to &amp;lt;a href=&quot;https://pythonbytes.fm/friends-of-the-show&quot;&amp;gt;our friends of the show list&amp;lt;/a&amp;gt;, we'll never share it.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Brian #1: Free-threaded Python no longer “experimental” as of Python 3.14&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;“PEP 779 (&quot;Criteria for supported status for free-threaded Python&quot;) has been accepted, which means free-threaded Python is now a supported build!” &amp;lt;a href=&quot;https://fosstodon.org/@hugovk@mastodon.social/114689715316210829&quot;&amp;gt;- Hugo van Kemenade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://peps.python.org/pep-0779/?featured_on=pythonbytes&quot;&amp;gt;PEP 779 – Criteria for supported status for free-threaded Python&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;As noted in the &amp;lt;a href=&quot;https://discuss.python.org/t/pep-779-criteria-for-supported-status-for-free-threaded-python/84319/123?featured_on=pythonbytes&quot;&amp;gt;discussion of PEP 779&amp;lt;/a&amp;gt;, “The Steering Council (SC) approves PEP 779, with the effect of removing the “experimental” tag from the free-threaded build of Python 3.14.”&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;We are in Phase II then.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;“We are confident that the project is on the right path, and we appreciate the continued dedication from everyone working to make free-threading ready for broader adoption across the Python community.”&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;“Keep in mind that any decision to transition to Phase III, with free-threading as the default or sole build of Python is still undecided, and dependent on many factors both within CPython itself and the community. We leave that decision for the future.”&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;How long will all this take? According to Thomas Wouters, &amp;lt;a href=&quot;https://social.coop/@Yhg1s/114692495471337607?featured_on=pythonbytes&quot;&amp;gt;a few years, at least&amp;lt;/a&amp;gt;: “In other words: it'll be a few years at least. It can't happen before 3.16 (because we won't have Stable ABI support until 15) and may well take longer.”&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Michael #2:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://github.com/livingbio/typed-ffmpeg?featured_on=pythonbytes&quot;&amp;gt;typed-ffmpeg&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;typed-ffmpeg&amp;lt;/strong&amp;gt; offers a modern, Pythonic interface to FFmpeg, providing extensive support for complex filters with detailed typing and documentation.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Inspired by ffmpeg-python, this package enhances functionality by addressing common limitations, such as lack of IDE integration and comprehensive typing, while also introducing new features like JSON serialization of filter graphs and automatic FFmpeg validation.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Features :&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Zero Dependencies:&amp;lt;/strong&amp;gt; Built purely with the Python standard library, ensuring maximum compatibility and security.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;User-Friendly:&amp;lt;/strong&amp;gt; Simplifies the construction of filter graphs with an intuitive Pythonic interface.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Comprehensive FFmpeg Filter Support:&amp;lt;/strong&amp;gt; Out-of-the-box support for most FFmpeg filters, with IDE auto-completion.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Integrated Documentation:&amp;lt;/strong&amp;gt; In-line docstrings provide immediate reference for filter usage, reducing the need to consult external documentation.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Robust Typing:&amp;lt;/strong&amp;gt; Offers static and dynamic type checking, enhancing code reliability and development experience.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Filter Graph Serialization:&amp;lt;/strong&amp;gt; Enables saving and reloading of filter graphs in JSON format for ease of use and repeatability.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Graph Visualization:&amp;lt;/strong&amp;gt; Leverages graphviz for visual representation, aiding in understanding and debugging.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Validation and Auto-correction:&amp;lt;/strong&amp;gt; Assists in identifying and fixing errors within filter graphs.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Input and Output Options Support:&amp;lt;/strong&amp;gt; Provide a more comprehensive interface for input and output options, including support for additional codecs and formats.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Partial Evaluation:&amp;lt;/strong&amp;gt; Enhance the flexibility of filter graphs by enabling partial evaluation, allowing for modular construction and reuse.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Media File Analysis:&amp;lt;/strong&amp;gt; Built-in support for analyzing media files using FFmpeg's ffprobe utility, providing detailed metadata extraction with both dictionary and dataclass interfaces.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Michael #3:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://github.com/deepankarm/pyleak?featured_on=pythonbytes&quot;&amp;gt;pyleak&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Detect leaked asyncio tasks, threads, and event loop blocking with stack trace in Python. Inspired by goleak.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use as context managers or function dectorators&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;When using no_task_leaks, you get detailed stack trace information showing exactly where leaked tasks are executing and where they were created.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Even has great examples and a pytest plugin.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Brian #4: &amp;lt;a href=&quot;https://timonweb.com/django/optimizing-test-execution-running-live_server-tests-last-with-pytest/?featured_on=pythonbytes&quot;&amp;gt;Optimizing Test Execution: Running live_server Tests Last with pytest&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Tim Kamanin&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;“When working with &amp;lt;strong&amp;gt;Django&amp;lt;/strong&amp;gt; applications, it's common to have a mix of fast unit tests and slower end-to-end (E2E) tests that use p&amp;lt;strong&amp;gt;ytest&amp;lt;/strong&amp;gt;'s &amp;lt;code&amp;gt;live_server&amp;lt;/code&amp;gt; fixture and browser automation tools like &amp;lt;strong&amp;gt;Playwright&amp;lt;/strong&amp;gt; or &amp;lt;strong&amp;gt;Selenium&amp;lt;/strong&amp;gt;. ”&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Tim is running E2E tests last for&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Faster feedback from quick tests&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;To not tie up resources early in the test suite.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;He did this with&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;custom “e2e” marker&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Implementing a &amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pytest_collection_modifyitems
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;hook function to look for tests using the &amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;live_server
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;fixture, and for them&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;automatically add the &amp;lt;code&amp;gt;e2e&amp;lt;/code&amp;gt; marker to those tests&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;move those tests to the end&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;The reason for the marker is to be able to&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Just run e2e tests with &amp;lt;code&amp;gt;-m e2e&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Avoid running them sometimes with &amp;lt;code&amp;gt;-m &quot;not e2e&quot;&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Cool small writeup.&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;The technique works for any system that has some tests that are slower or resource bound based on a particular fixture or set of fixtures.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Extras&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Brian:&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://discuss.python.org/t/is-free-threading-our-only-option/91775?featured_on=pythonbytes&quot;&amp;gt;Is Free-Threading Our Only Option?&amp;lt;/a&amp;gt; - Interesting discussion started by Eric Snow and recommended by John Hagen&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://hugovk.dev/blog/2025/free-threaded-python-on-github-actions/?featured_on=pythonbytes&quot;&amp;gt;Free-threaded Python on GitHub Actions&amp;lt;/a&amp;gt; - How to add FT tests to your projects, by Hugo van Kemenade&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;Michael:&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;New course! &amp;lt;a href=&quot;https://training.talkpython.fm/courses/llm-building-blocks-for-python?featured_on=pythonbytes&quot;&amp;gt;LLM Building Blocks in Python&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://talkpython.fm/blog/posts/deep-dive-retrospective-at-talk-python/?featured_on=pythonbytes&quot;&amp;gt;Talk Python Deep Dives Complete: 600K Words of Talk Python Insights&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;.folders on Linux
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Write up on &amp;lt;a href=&quot;https://blobs.pythonbytes.fm/xdg-config-home-v2.html&quot;&amp;gt;XDG for Python devs&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://blobs.pythonbytes.fm/keep-pulling-back-in.jpg&quot;&amp;gt;They keep pulling me back&amp;lt;/a&amp;gt; - &amp;lt;a href=&quot;https://help.openai.com/en/articles/9624314-model-release-notes?featured_on=pythonbytes&quot;&amp;gt;ChatGPT Pro with o3-pro&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Python Bytes is the &amp;lt;a href=&quot;https://goodpods.com/leaderboard/top-100-shows-by-category/news/tech-news?period=month#67232899&quot;&amp;gt;#1 Python news podcast and #17 of all tech news podcasts&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pythoninsider.blogspot.com/2025/06/python-3134-31211-31113-31018-and-3923.html?featured_on=pythonbytes&quot;&amp;gt;Python 3.13.4, 3.12.11, 3.11.13, 3.10.18 and 3.9.23 are now available&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pythoninsider.blogspot.com/2025/06/python-3135-is-now-available.html?featured_on=pythonbytes&quot;&amp;gt;Python 3.13.5 is now available!&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Joke:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://x.com/PR0GRAMMERHUM0R/status/1930655881718382721?featured_on=pythonbytes&quot;&amp;gt;Naming is hard&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
	<pubDate>Mon, 16 Jun 2025 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Ned Batchelder: Math factoid of the day: 63</title>
	<guid>https://nedbatchelder.com/blog/202506/math_factoid_of_the_day_63.html</guid>
	<link>https://nedbatchelder.com/blog/202506/math_factoid_of_the_day_63.html</link>
	<description>&lt;p&gt;63 is a &lt;a rel=&quot;external noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Centered_octahedral_number&quot;&gt;centered octahedral number&lt;/a&gt;. That means if you
build an approximation of an octahedron with cubes, one size of octahedron will
have 63 cubes.&lt;/p&gt;&lt;p&gt;In the late 1700&amp;#8217;s &lt;a rel=&quot;external noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Ren%C3%A9_Just_Ha%C3%BCy&quot;&gt;René Just Haüy&lt;/a&gt; developed a theory
about how crystals formed: successive layers of fundamental primitives in
orderly arrangements.  One of those arrangements was stacking cubes together to
make an octahedron.&lt;/p&gt;&lt;p&gt;Start with one cube:&lt;/p&gt;&lt;div class=&quot;figurep&quot;&gt;&lt;img src=&quot;https://nedbatchelder.com/code/diagrams/hauy/0.svg&quot; alt=&quot;Just one lonely cube&quot; /&gt;&lt;/div&gt;&lt;p&gt;Add six more cubes around it, one on each face. Now we have seven:&lt;/p&gt;&lt;div class=&quot;figurep&quot;&gt;&lt;img src=&quot;https://nedbatchelder.com/code/diagrams/hauy/1.svg&quot; alt=&quot;Seven cubes as a crude octahedron&quot; /&gt;&lt;/div&gt;&lt;p&gt;Add another layer, adding a cube to touch each visible cube, making 25:&lt;/p&gt;&lt;div class=&quot;figurep&quot;&gt;&lt;img src=&quot;https://nedbatchelder.com/code/diagrams/hauy/2.svg&quot; alt=&quot;25 cubes arranged like an octahedron five cubes wide&quot; /&gt;&lt;/div&gt;&lt;p&gt;One more layer and we have a total of 63:&lt;/p&gt;&lt;div class=&quot;figurep&quot;&gt;&lt;img src=&quot;https://nedbatchelder.com/code/diagrams/hauy/3.svg&quot; alt=&quot;63 cubes arranged like an octahedron seven cubes wide&quot; /&gt;&lt;/div&gt;&lt;p&gt;The remaining numbers in &lt;a href=&quot;https://oeis.org/A001845&quot; rel=&quot;external noopener&quot;&gt;the sequence&lt;/a&gt;
less than 10,000 are 129, 231, 377, 575, 833, 1159, 1561, 2047, 2625, 3303,
4089, 4991, 6017, 7175, 8473, 9919.&lt;/p&gt;&lt;p&gt;63 also shows up in the &lt;a rel=&quot;external noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Delannoy_number&quot;&gt;Delannoy numbers&lt;/a&gt;: the
number of ways to traverse a grid from the lower left corner to upper right
using only steps north, east, or northeast.  Here are the 63 ways of moving on a
3&lt;span class=&quot;times&quot;&gt;×&lt;/span&gt;3 grid:&lt;/p&gt;&lt;div class=&quot;figurep&quot;&gt;&lt;img src=&quot;https://nedbatchelder.com/code/diagrams/delannoy3.svg&quot; alt=&quot;63 different ways to traverse a 3x3 grid&quot; /&gt;&lt;/div&gt;&lt;p&gt;(Diagram from &lt;a href=&quot;https://en.wikipedia.org/wiki/File:Delannoy3x3.svg&quot; rel=&quot;external noopener&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;In fact, the number of cubes in a Haüy octahedron with N layers is the same
as the number of Delannoy steps on a 3&lt;span class=&quot;times&quot;&gt;×&lt;/span&gt;N grid!&lt;/p&gt;&lt;p&gt;Since the two ideas are both geometric and fairly simple, I would love to
find a geometric explanation for the correspondence.  The octahedron is
three-dimensional, and the Delannoy grids have that tantalizing 3 in them.  It
seems like there should be a way to convert Haüy coordinates to Delannoy
coordinates to show how they relate.  But I haven&amp;#8217;t found one...&lt;/p&gt;&lt;p class=&quot;bulletsep&quot;&gt;•    •    •&lt;/p&gt;&lt;p&gt;Colophon: I made the octahedron diagrams by asking Claude to write a
&lt;a href=&quot;https://nedbatchelder.com/code/diagrams/hauy/hauy_oct.py&quot;&gt;Python program&lt;/a&gt; to do it.
It wasn&amp;#8217;t a fast process because it took pushing and prodding to get the
diagrams to come out the way I liked.  But Claude was very competent, and I
could think about the results rather than about projections or color spaces.  I
could dip into it for 10 minutes at a time over a number of days without having
to somehow reconstruct a mental context.&lt;/p&gt;&lt;p&gt;This kind of casual hobby programming is perfect for AI assistance.  I don&amp;#8217;t
need the code to be perfect or even good, I just want the diagrams to be nice.
I don&amp;#8217;t have the focus time to learn how to write the program, so I can leave it
to an imperfect assistant.&lt;/p&gt;</description>
	<pubDate>Mon, 16 Jun 2025 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Seth Michael Larson: UN Open Source Week 2025: Security for the Long-Haul</title>
	<guid>https://sethmlarson.dev/un-open-source-week-2025-security-for-the-long-haul?utm_campaign=rss</guid>
	<link>https://sethmlarson.dev/un-open-source-week-2025-security-for-the-long-haul?utm_campaign=rss</link>
	<description>&lt;p&gt;This page was used during the &lt;a href=&quot;https://www.un.org/digital-emerging-technologies/content/open-source-week-2025&quot;&gt;United Nations Open Source Week&lt;/a&gt; &quot;Maintain-a-thon&quot;
hosted by the &lt;a href=&quot;https://sovereign.tech&quot;&gt;Sovereign Tech Agency&lt;/a&gt; and &lt;a href=&quot;https://alpha-omega.dev&quot;&gt;Alpha Omega&lt;/a&gt;. Thanks to both the Sovereign Tech Agency
and Alpha Omega for supporting my attendance at this event and Alpha Omega for
supporting security in the Python ecosystem.&lt;/p&gt;

&lt;p&gt;This page contains the content from the break-out session
I led during the &quot;Maintain-a-thon&quot; titled &quot;Security for the Long-Haul&quot;.
The format was quite loose and in-the-moment, so apologies for
the extremely light amount of editing in this article.&lt;/p&gt;

&lt;h2&gt;Why does long-haul security matter?&lt;/h2&gt;

&lt;p&gt;Open source projects that achieve widespread usage tend to
follow a similar trajectory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start an Open Source project&lt;/li&gt;
&lt;li&gt;Scale an Open Source project&lt;/li&gt;
&lt;li&gt;Sustain an Open Source project&lt;/li&gt;
&lt;li&gt;Sunsetting an Open Source project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After open source projects stop growing in terms of users and new features
they often will reach a &quot;stable&quot; steady-state. In this state there are likely
fewer new features being developed and most changes to the project are
bug fixes or security fixes.&lt;/p&gt;

&lt;p&gt;Security work is what I consider to be the &quot;minimum viable maintenance&quot;
for a software project that is still an &quot;upstream&quot;. Without security fixes,
users will need to fork and maintain the project themselves or move
to an alternative project.&lt;/p&gt;

&lt;p&gt;
&lt;center&gt;

  
    
      
        
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
            
            
          
        
        
          
        
        
          
        
        
          
            
            
          
        
        
          
        
      
    
  

&quot; onclick=&quot;(function(svg){var src=window.event.target||window.event.srcElement;while (src!=null&amp;amp;&amp;amp;src.nodeName.toLowerCase()!='a'){src=src.parentNode;}if(src==null){if(svg.wnd!=null&amp;amp;&amp;amp;!svg.wnd.closed){svg.wnd.focus();}else{var r=function(evt){if(evt.data=='ready'&amp;amp;&amp;amp;evt.source==svg.wnd){svg.wnd.postMessage(decodeURIComponent(svg.getAttribute('content')),'*');window.removeEventListener('message',r);}};window.addEventListener('message',r);svg.wnd=window.open('https://viewer.diagrams.net/?client=1&amp;amp;page=0&amp;amp;edit=_blank');}}})(this);&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;TIME&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;TIME&lt;div&gt;&lt;div&gt;&lt;div&gt;USAGE&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;USAGE&lt;div&gt;&lt;div&gt;&lt;div&gt;FEATURE&lt;br /&gt;COMPLETE&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;FEATURE...&lt;a target=&quot;_blank&quot;&gt;Text is not SVG - cannot display&lt;/a&gt;
&lt;br /&gt;&lt;small&gt;&lt;i&gt;Graph of an open source project usage over time.&lt;/i&gt;&lt;/small&gt;&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;Projects and code spends most of its time in the &quot;stable maintenance&quot;
state, the early development phase is relatively short-lived.&lt;/p&gt;

&lt;p&gt;Some projects may also find security work in-general
more difficult than others, either due to a lack of resources
or time. Smaller projects usually are low on maintainers.
Projects of specific topics (e.g. scientific computing)
may not see themselves as security-sensitive.&lt;/p&gt;

&lt;h2&gt;What does ideal long-haul security look like?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Project is able to consistently onboard new contributors interested in long-term maintenance.&lt;/li&gt;
&lt;li&gt;Vulnerabilities when found are reported, fixed, and published.
Users are notified and able to upgrade or mitigate vulnerabilities.&lt;/li&gt;
&lt;li&gt;Project configuration, processes, and security tooling are kept secure and up-to-date.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Challenges&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Contributors interested in security work might not be the same contributors
interested in the project domain.&lt;/li&gt;
&lt;li&gt;Security work often requires project domain expertise (how does X feature work).&lt;/li&gt;
&lt;li&gt;Trust bringing on new maintainers, especially late in the project lifecycle (popular! xz-utils)&lt;/li&gt;
&lt;li&gt;Vulnerability reporting work is inherently isolated. Can't lean on your existing
community by default.&lt;/li&gt;
&lt;li&gt;New security features for project (source forge, package repository, accounts) are not enabled by default.&lt;/li&gt;
&lt;li&gt;Fewer features for maintainers to work on to be excited, inspired, recognition.&lt;/li&gt;
&lt;li&gt;Many contributors want to work on domain-specific code, not necessarily security.&lt;/li&gt;
&lt;li&gt;Want to minimize effort keeping up-to-date with latest security practices / tools.&lt;/li&gt;
&lt;li&gt;Less energy to improve or change processes when a project
is heading in the wrong direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Questions for discussion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Who can be helpful in solving these challenges?&lt;/li&gt;
&lt;li&gt;How can we get users engaged and able to contribute upstream to security?&lt;/li&gt;
&lt;li&gt;How to celebrate and reward long-term maintenance of open source software?&lt;/li&gt;
&lt;li&gt;How to establish trust among new contributors, especially those with less online presence?&lt;/li&gt;
&lt;li&gt;How to find and onboard contributors interested in security work safely?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notes from the Discussion&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Beware! From this section onwards is a raw dump of notes from a Google document!&lt;/strong&gt; They have not been edited in any way, but if you're interested they are here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;What I learned today&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Quantifying the fInancial risk, better feedback mechanism between the security funding versus the risk. Down the dependency graph beyond the product. Financial connection.
&lt;ul&gt;
&lt;li&gt;Can the top-down effort be done and then publishing the information instead of bottom-up. “Mega-phone” for the maintainers?&lt;/li&gt;
&lt;li&gt;Stakeholders.&lt;/li&gt;
&lt;li&gt;Game-theory: tragedy of the commons. Should this be a social / governance especially for smaller projects.&lt;/li&gt;
&lt;li&gt;From a large corporation it’s hard to do that analysis and prove that you affect change.&lt;/li&gt;
&lt;li&gt;Crises are much more visible.Reacting to crises.&lt;/li&gt;
&lt;li&gt;OSPOs started as a charity. Now it’s evolved to be risk management.&lt;/li&gt;
&lt;li&gt;Balance sheet, chief open source controller. Short-term risk/credit, tools that you use to manage a financial portfolio.&lt;/li&gt;
&lt;li&gt;Will you pay the salary or the amount that you expect others to pay as well? Depending on corporations working together and coordinating.&lt;/li&gt;
&lt;li&gt;CISOs being fired for zero-days, can we create pressure to manage your open source risk?&lt;/li&gt;
&lt;li&gt;Cyber Resilience Act (CRA) if the way its implemented, security of their dependencies. Something will happen, either every company will support its dependencies or it will create an intermediate market.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How do you give people that are domain-specific to give the tools they need to develop their projects securely?
&lt;ul&gt;
&lt;li&gt;“Security is somebody else’s problem”&lt;/li&gt;
&lt;li&gt;People don’t care about security, they care about usability. Limited arsenal.&lt;/li&gt;
&lt;li&gt;Better defaults for security.&lt;/li&gt;
&lt;li&gt;People want to ship! “Have to conform to the ecosystem”, balance between openness and security.&lt;/li&gt;
&lt;li&gt;CI is a big expense to provide to a community. Doesn’t seem readily possible to fund/credit this.&lt;/li&gt;
&lt;li&gt;How much time is spent to be more efficient? Lots of work is done.&lt;/li&gt;
&lt;li&gt;OSS-Fuzz, essentially donated CI for fuzzing&lt;/li&gt;
&lt;li&gt;Homebrew: everything is CI.&lt;/li&gt;
&lt;li&gt;Have to communicate “return on investment” on providing CI minutes.&lt;/li&gt;
&lt;li&gt;Would love to write a case study about “how the UN digital infrastructure would be supported by funding”&lt;/li&gt;
&lt;li&gt;What metrics do we use? Do ourselves or our customers use the project, tough sell otherwise. You need to quantify the failure, how much does it cost if we have a failure.&lt;/li&gt;
&lt;li&gt;Repeated funding is the issue.&lt;/li&gt;
&lt;li&gt;The credit programs are increasing, not decreasing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“Imagine what it’s like for the smaller projects?”
&lt;ul&gt;
&lt;li&gt;Won’t be able to advocate for themselves, even harder than smaller projects.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Digital Public Infrastructure, problem solved through taxation. Treat as public infrastructure.
&lt;ul&gt;
&lt;li&gt;Small libraries don’t know their options.&lt;/li&gt;
&lt;li&gt;What is our goal? Only remaining security problems for the projects being the ones we don’t know how to solve. Secure defaults.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OSS-Fuzz: lays bare the lie that the work is done.
&lt;ul&gt;
&lt;li&gt;Contributor that is interested in OSS-Fuzz&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Success story for a small project that is well-supported: cryptography
&lt;ul&gt;
&lt;li&gt;Sqlite. Cryptography doesn’t take money, but they work with others to contribute.&lt;/li&gt;
&lt;li&gt;“There’s not a lot that you have to do”.&lt;/li&gt;
&lt;li&gt;Not a huge checklist: 8-10 things to have “good enough security”.&lt;/li&gt;
&lt;li&gt;We wish these things were default on!&lt;/li&gt;
&lt;li&gt;Keep your dependencies up to date. Don’t worry about Dependabot.&lt;/li&gt;
&lt;li&gt;Upgrading incurs risk, too. Most people don’t have incredibly large test suites.&lt;/li&gt;
&lt;li&gt;Renovate auto-merge.&lt;/li&gt;
&lt;li&gt;“Hold-back feature for Dependabot” waiting for low-quality/backdoors to be shaken out.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Corporate donated security work time if “maintainers are not contributors”
&lt;ul&gt;
&lt;li&gt;Private fork of the project that can be pulled in if needed.&lt;/li&gt;
&lt;li&gt;How can I trust that the contributor is good to have this information?&lt;/li&gt;
&lt;li&gt;Surprises me that it doesn’t happen more seeing corporate donation of time for security work.&lt;/li&gt;
&lt;li&gt;OpenSSF meeting aligning corporate contributors to align bug fixes.&lt;/li&gt;
&lt;li&gt;Pre-vetted set of engineers doing security work.&lt;/li&gt;
&lt;li&gt;How would maintainers know to engage that process?&lt;/li&gt;
&lt;li&gt;Security engineers would have to show up on the project and be proactive. Drive-by.&lt;/li&gt;
&lt;li&gt;“I’ll help you with security” can be sketchy, how to legitimize.&lt;/li&gt;
&lt;li&gt;Batphone for maintainers. Log4j had infra, xz-utils didn’t.&lt;/li&gt;
&lt;li&gt;Not supposed to be solving the issues, would be mentoring the maintainers rather than solving the problems.&lt;/li&gt;
&lt;li&gt;Narrowing the scope of what we offer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Percentage of maintainers that know about dependeabot/static analysis: there isn’t any knowledge, even for basics. Foundational education, what are these security features.&lt;/li&gt;
&lt;li&gt;How do you vet an open source contributor or maintainer?
&lt;ul&gt;
&lt;li&gt;Xz-utils taught us that you can’t trust just the content of the commits.&lt;/li&gt;
&lt;li&gt;Homebrew institutes a real-name policy, with photo ID check that gets thrown away. Not aiming for nation-state coverage. &lt;/li&gt;
&lt;li&gt;Whole lot of vibes, blogs, socials, etc. Do the stuff that no one else wants to do.&lt;/li&gt;
&lt;li&gt;LLMs are good at “creating vibes”? Do I care if the content of the commits.&lt;/li&gt;
&lt;li&gt;Maintainer is on the hook for the contributions.&lt;/li&gt;
&lt;li&gt;Conferences as security “vetting”. Whether that’s explicit or not based on travel availability.&lt;/li&gt;
&lt;li&gt;Filtering out based on the geography, ability to pay, &lt;/li&gt;
&lt;li&gt;Foundations could sponsor travel grants.&lt;/li&gt;
&lt;li&gt;How many communities write down what it takes to be a maintainer/release manager.&lt;/li&gt;
&lt;li&gt;Drupal: try to have maintainers on each continent (timing, local knowledge, languages).&lt;/li&gt;
&lt;li&gt;Not common to have documentation on how to become a release manager.&lt;/li&gt;
&lt;li&gt;Release manager checklist for vetting new dependencies: can we release with them in a nice way.&lt;/li&gt;
&lt;li&gt;Maintainers are allowed to opt-in to the security and having a badge.&lt;/li&gt;
&lt;li&gt;cargo-vet&lt;/li&gt;
&lt;li&gt;There is probably closure within PyPI. “Island analysis”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Better defaults
&lt;ul&gt;
&lt;li&gt;Repository level defaults, branch protection, token&lt;/li&gt;
&lt;li&gt;Project scaffolding w/ good defaults per language.&lt;/li&gt;
&lt;li&gt;Package installers/publishers.&lt;/li&gt;
&lt;li&gt;Whack-a-mole bad defaults.
&lt;ul&gt;
&lt;li&gt;Updating existing project templates is hard! (&lt;a href=&quot;https://cruft.github.io/cruft/&quot;&gt;cruft&lt;/a&gt;/cookiecutter - maybe look at &lt;a href=&quot;https://projen.io/&quot;&gt;projen&lt;/a&gt;?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make project management into pull requests.
&lt;ul&gt;
&lt;li&gt;Check the box for other people. Lightweight.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating a template and “making it easy”.
&lt;ul&gt;
&lt;li&gt;It’s a hobby, I don’t want to read best practices guides.&lt;/li&gt;
&lt;li&gt;Make it explicit in their README.&lt;/li&gt;
&lt;li&gt;Want the benefits of a project being used, but don’t want the responsibility.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Template that documents your intentions.&lt;/li&gt;
&lt;li&gt;When we add a dependency, make an inference on a dependency. Moves responsibility to product developers.
&lt;ul&gt;
&lt;li&gt;Measuring activity levels.&lt;/li&gt;
&lt;li&gt;Activity level is tricky.&lt;/li&gt;
&lt;li&gt;Sqlite exhibits many of the characteristics of a project &lt;/li&gt;
&lt;li&gt;They take reports, but not code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Choosing not to use a library versus using it.&lt;/li&gt;
&lt;li&gt;Encouraging maintainers to state their intentions more clearly.&lt;/li&gt;
&lt;li&gt;Be conservative about your technology choices. Transitive dependencies kinda hurts this, you are not the only decider.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We haven’t solved xz-utils!
&lt;ul&gt;
&lt;li&gt;Damage limitations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What I wish existed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Balance sheets for open source risk&lt;/li&gt;
&lt;li&gt;We’ve talked about the people maintaining open source software. Dependabot found a security vulnerability, how much of that library do I actually use. False-positives. Notification fatigue. Show off API usage per project. SBOM (SPDX) allows showing the exposure of a library.&lt;/li&gt;
&lt;li&gt;Batphone for maintainers, questions&lt;/li&gt;
&lt;li&gt;Best practice recommendations on how to vet new maintainers/security contributors.&lt;/li&gt;
&lt;li&gt;Deleting old insecure templates for projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Summary for larger group&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sustainability, we found ourselves talking about sustainability as a response. Don’t want to engage with security, want to have assets available to them.&lt;/li&gt;
&lt;li&gt;Sec defaults Existing tools and projects don’t use templates. Templates tend to get outdated over time. More secure defaults on the tools, project management tools and platforms are important to solve this issue.&lt;/li&gt;
&lt;li&gt;Vetting the trustworthiness of a maintainer or contributor is difficult. May be already happening implicitly, but many projects dont document this process.&lt;/li&gt;
&lt;li&gt;Identified a “bat phone” for maintainers as being useful, the problem would be projects not knowing. Solutions need to be proactive to reach small or disengaged projects.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Ed Crewe: Talk about Cloud Prices at PyConLT 2025</title>
	<guid>http://edcrewe.blogspot.com/2025/04/talk-about-cloud-prices-at-pyconlt-2025.html</guid>
	<link>http://edcrewe.blogspot.com/2025/04/talk-about-cloud-prices-at-pyconlt-2025.html</link>
	<description>&lt;p&gt;&lt;span&gt;&lt;img height=&quot;366&quot; src=&quot;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeMbQWsFsx6cdC3J0tNHjTiGC_9e0OAxdzmKmuTJXB6SAqd_wWcOZXPuWrjwKiMh0SHac_7FinmyJn4uEb3Z7mlGZ99rxEjDDO7vzFSeQDuRgPMtsX6nlb2x6W26uC5rIzxeRJ2=w697-h366?key=P5CtPHSq8gZ_68XgDHhE5o1v&quot; width=&quot;697&quot; /&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Introduction to Cloud Pricing&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;I am looking forward to &lt;a href=&quot;https://pycon.lt/talks/PZD7QE&quot;&gt;speaking at PyConLT 2025&lt;/a&gt;.&amp;nbsp;&lt;br /&gt;My talk is called &lt;a href=&quot;https://docs.google.com/presentation/d/1LI49wZpc-2mxdA8Z7vLdRGqm02ECzdrHVIhko8Xx5ZE/edit?usp=sharing&quot;&gt;Cutting the Price of Scraping Cloud Costs&lt;/a&gt;&amp;nbsp;(&lt;a href=&quot;https://www.youtube.com/watch?v=5acBTY0Q4sY&quot;&gt;video&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Its been a while (12 years!) since my last Python conference &lt;a href=&quot;https://www.youtube.com/watch?v=OeToCdcv8zo&quot;&gt;EuroPython Florence 2012&lt;/a&gt;, when I spoke as a Django web developer, although I did give &lt;a href=&quot;https://colocatedeventsna2024.sched.com/event/1izso/fake-it-to-make-it-tdd-of-grpc-microservices-ed-crewe-enterprisedb&quot;&gt;a Golang talk at Kubecon&lt;/a&gt; USA last year.&lt;/p&gt;&lt;p&gt;I work at EDB, the Postgres company, on our Postgres AI product. The cloud version of which runs across the main cloud providers, AWS, Azure and GCP.&lt;/p&gt;&lt;p&gt;The team I am in handles the identity management and billing components of the product. So whilst I am mainly a Golang micro-service developer, I have dipped my toe into Data Science, having rewritten our Cloud prices ETL using Python &amp;amp; Airflow. The subject of my talk in Lithuania.&lt;/p&gt;&lt;p&gt;Cloud pricing can be surprisingly complex ... and the price lists are not small.&lt;/p&gt;&lt;p&gt;The full price lists for the 3 CSPs together are almost 5 million prices - known as SKUs (Stock Keeping Unit prices)&lt;/p&gt;&lt;h4&gt;&lt;span&gt;csp x service x type x tier x region&lt;br /&gt;&lt;/span&gt;&lt;span&gt;3&amp;nbsp; &amp;nbsp; x&amp;nbsp; 200&amp;nbsp; &amp;nbsp; &amp;nbsp; x 50&amp;nbsp; &amp;nbsp; &amp;nbsp;x 3&amp;nbsp; &amp;nbsp; &amp;nbsp;x 50&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = 4.5 million&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;csp = AWS, Azure and GCP&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;service = vms, k8s, network, load balancer, storage etc.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;type = e.g. storage - general purpose E2, N1 ... accelerated A1, A2&amp;nbsp; multiplied by various property sizes&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;tier&amp;nbsp; = T-shirt size tiers of usage, ie more use = cheaper rate - small, medium, large&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;region = us-east-1, us-west-2, af-south-1, etc.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;We need to gather all the latest service SKU that our Postgres AI may use and total them up as a cost estimate for when customers are selecting the various options for creating or adding to their installation. &lt;br /&gt;Applying the additional pricing for our product and any private offer discounts for it, as part of this process.&lt;/p&gt;&lt;p&gt;Therefore we needed to build a data pipeline to gather the SKUs and keep them current.&lt;/p&gt;&lt;p&gt;Previously we used a 3rd party &lt;a href=&quot;https://github.com/kubecost&quot;&gt;kubecost&lt;/a&gt; based provider's data, however our usage was not sufficient to justify for paying for this particular cloud service when its free usage expired.&lt;/p&gt;&lt;p&gt;Hence we needed to rewrite our cloud pricing data pipeline. This pipeline is in &lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt; but it could equally be in &lt;a href=&quot;https://dagster.io/&quot;&gt;Dagster&lt;/a&gt; or any other data pipeline framework.&lt;/p&gt;&lt;p&gt;My talk deals with the wider points around cloud pricing, refactoring a data pipeline and pipeline framework options. But here I want to provide more detail on the data pipeline's Python code, its use of &lt;a href=&quot;https://github.com/fergusstrange/embedded-postgres&quot;&gt;Embedded Postgres&lt;/a&gt; and &lt;a href=&quot;https://click.palletsprojects.com/en/stable/&quot;&gt;Click&lt;/a&gt;, and the benefits for development and testing.&amp;nbsp; Some things I didn't have room for in the talk.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;b&gt;Outline of our use of Data Pipelines&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span&gt;Airflow, Dagster, etc. provide many tools for pipeline development.&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Notably local development mode for running up the pipeline framework locally and doing test runs.&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Including some reloading on edit, it can still be a long process, running up a pipeline and then executing the full set of steps, known as a directed acyclic graph, DAG.&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;One way to improve the DEVX is if the DAG step's code is encapsulated as much as possible per step.&lt;br /&gt;Removing use of shared state where that is viable and allowing individual steps to be separately tested, rapidly, with fixture data. With fast stand up and tear down, of temporary embedded storage.&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;To avoid shared state persistence across the whole pipeline we use extract transform load (ETL) within each step, rather than across the whole pipeline. This enables functional running and testing of individual steps outside the pipeline.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;The Scraper Class&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;We need a standard scraper class to fetch the cloud prices from each CSP so use an abstract base class.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; abc &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; ABC&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;BaseScraper&lt;/span&gt;&lt;span&gt;(ABC):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;Abstract base class for Scrapers&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;batch &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;conn &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;unit_map &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;span&gt;&quot;FAIL&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;root_url &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;b id=&quot;docs-internal-guid-589ca1d7-7fff-f046-0a45-ea3cd1d1539e&quot;&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;map_units&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;To standardize naming of units between CSPs&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.unit_map.get(entry.get(key, &lt;/span&gt;&lt;span&gt;&quot;FAIL&quot;&lt;/span&gt;&lt;span&gt;), entry[key])&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;b&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;scrape_sku&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;Scrapes prices from CSP bulk JSON API - uses CSP specific methods&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;Pass&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;b&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;bulk_insert_rows&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;Bulk insert batches of rows - Note that Psycopg &amp;gt;= 3.1 uses pipeline mode&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;query &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;INSERT INTO api_price.infra_price VALUES&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;/span&gt;&lt;span&gt;%(sku_id)s&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;%(cloud_provider)s&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;%(region)s&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;…&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;%(sku_name)s&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;%(end_usage_amount)s&lt;/span&gt;&lt;span&gt;)&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.conn.cursor() &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; cur:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cur.executemany(query, rows)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;This has 3 common methods:&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;mapping units to common ones across all CSP&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Top level scrape sku methods some CSP differences within sub methods called from it&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Bulk insert rows - the main concrete method used by all scrapers&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;To bulk insert 500 rows per query we use&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.psycopg.org/psycopg3/&quot;&gt;Psycopg 3&lt;/a&gt;&amp;nbsp;pipeline mode - so it can send batch updates again and again without waiting for response.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;The database update against local embedded Postgres is faster than the time to scrape the remote web site SKUs.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;The largest part of the Extract is done at this point. Rather than loading all 5 million SKU as we did with the kubecost data dump, to query out the 120 thousand for our product. Scraping the sources directly we only need to ingest those 120k SKU. Which saves handling 97.6% of the data!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;So the resultant speed is sufficient although not as performant as pg_dump loading which uses COPY.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Unfortunately Python Psycopg is significantly slower when using cursor.copy and it mitigated against using zipped up Postgres dumps. Hence all the data artefact creation and loading simply uses the pg_dump utility wrapped as a Python shell command.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;There is no need to use Python here when there is the tried and tested C based pg_dump utility for it that ensures compatibility outside our pipeline. Later version pg_dump can always handle earlier Postgres dumps.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;We don't need to retain a long history of artefacts, since it is public data and never needs to be reverted.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;This allows us a low retention level, cleaning out most of the old dumps on creation of a new one. So any storage saving on compression is negligible.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Therefore we avoid pg_dump compression, since it can be significantly slower, especially if the data already contains compressed blobs. Plain SQL COPY also allows for data inspection if required - eg grep for a SKU, when debugging why a price may be missing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;Postgres Embedded wrapped with Go&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span&gt;Unlike MySQL, Postgres doesn't do in memory databases. The equivalent for temporary or test run database lifetime, is the embedded version of Postgres. Run from an auto-created temp folder of files.&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Python doesn’t have maintained wrapper for Embedded Postgres, sadly p&lt;/span&gt;&lt;span&gt;roject https://github.com/Simulmedia/pyembedpg is abandoned 😢&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;Hence use the most up to date &lt;a href=&quot;https://github.com/fergusstrange/embedded-postgres&quot;&gt;wrapper from Go&lt;/a&gt;. Running the Go binary via a Python shell command.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;It still lags behind by a version of Postgres, so its on Postgres 16 rather than latest 17.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;But for the purposes of embedded use that is irrelevant.&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;By using separate temporary Postgres per step we can save a dumped SQL artefact at the end of a step and need no data dependency between steps, meaning individual step retry in parallel, just works. &lt;br /&gt;The performance of localhost dump to socket is also superior.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;By processing everything in the same (if embedded) version of our final target database as the Cloud Price, Go micro-service, we remove any SQL compatibility issues and ensure full Postgresql functionality is available.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;The final data artefacts will be loaded to a Postgres cluster price schema micro-service running on&amp;nbsp;&lt;a href=&quot;https://cloudnative-pg.io/&quot;&gt;CloudNativePG&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Use a Click wrapper with Tests&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;The click package provides all the functionality for our pipeline..&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;span id=&quot;docs-internal-guid-9cdd575b-7fff-debf-7bfb-29b4feca0607&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;gt; pscraper -h

&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Usage: pscraper [OPTIONS] COMMAND [ARGS]...&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;price-scraper: python web scraping of CSP prices for api-price&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Options:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;-h, --help&amp;nbsp; Show this message and exit.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Commands:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;awsscrape &amp;nbsp; &amp;nbsp; Scrape prices from AWS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;azurescrape&amp;nbsp; Scrape prices from Azure&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;delold&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Delete old blob storage files, default all over 12 weeks old are deleted&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;gcpscrape &amp;nbsp; &amp;nbsp; Scrape prices from GCP - set env GCP_BILLING_KEY&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;pgdump&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Dump postgres file and upload to cloud storage - set env STORAGE_KEY&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;gt; pscraper pgdump --port 5377 --file price.sql&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;pgembed&amp;nbsp; &amp;nbsp; &amp;nbsp; Run up local embeddedPG on a random port for tests &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;                        &amp;gt; pscraper pgembed&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;pgload &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Load schema to local embedded postgres for testing &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;                        &amp;gt; pscraper pgload --port 5377 --file price.sql&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;This caters for developing the step code entirely outside the pipeline for development and debug.&lt;br /&gt;We can run pgembed to create a local db, pgload to add the price schema. Then run individual scrapes from a pipenv &lt;span&gt;pip install -e version &lt;/span&gt;of the the price scraper package.&lt;/p&gt;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;For unit testing we can create a mock response object for the data scrapers that returns different fixture payloads based on the query and monkeypatch it in. This allows us to functionally test the whole scrape and data artefact creation ETL cycle as unit functional tests.&lt;br /&gt;&lt;br /&gt;Any issues with source data changes can be replicated via a fixture for regression tests.&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;MockResponse&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;    &lt;span&gt;&quot;&quot;&quot;Fake to return fixture value of requests.get() for testing scrape parsing&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;    name &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;Mock User&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;    payload &lt;span&gt;=&lt;/span&gt; {}&lt;/div&gt;&lt;div&gt;    content &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;    status_code &lt;span&gt;=&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;/div&gt;&lt;div&gt;    url &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;http://mock_url&quot;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;, &lt;span&gt;payload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;{}, &lt;span&gt;url&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;http://mock_url&quot;&lt;/span&gt;):&lt;/div&gt;&lt;div&gt;        &lt;span&gt;self&lt;/span&gt;.url &lt;span&gt;=&lt;/span&gt; url&lt;/div&gt;&lt;div&gt;        &lt;span&gt;self&lt;/span&gt;.payload &lt;span&gt;=&lt;/span&gt; payload&lt;/div&gt;&lt;div&gt;        &lt;span&gt;self&lt;/span&gt;.content &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;(payload)&lt;/div&gt;&lt;br /&gt;&lt;div&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;json&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;):&lt;/div&gt;&lt;div&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;.payload&lt;/div&gt;&lt;/div&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;mock_aws_get&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;, &lt;span&gt;**&lt;/span&gt;&lt;span&gt;kwargs&lt;/span&gt;):&lt;/div&gt;&lt;div&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&quot;&quot;&quot;Return the fixture JSON that matches the URL used&quot;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;    &lt;span&gt;for&lt;/span&gt; key, fix &lt;span&gt;in&lt;/span&gt; fixtures.items():&lt;/div&gt;&lt;div&gt;        &lt;span&gt;if&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; url:&lt;/div&gt;&lt;div&gt;            &lt;span&gt;return&lt;/span&gt; MockResponse(&lt;span&gt;payload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;fix, &lt;span&gt;url&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;url)&lt;/div&gt;&lt;div&gt;    &lt;span&gt;return&lt;/span&gt; MockResponse()&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestAWSScrape&lt;/span&gt;(&lt;span&gt;TestCase&lt;/span&gt;):&lt;/div&gt;&lt;div&gt;    &lt;span&gt;&quot;&quot;&quot;Tests for the 'pscraper awsscrape' command&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;setUpClass&lt;/span&gt;():&lt;/div&gt;&lt;div&gt;        &lt;span&gt;&quot;&quot;&quot;Simple monkeypatch in mock handlers for all tests in the class&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;        psycopg.connect &lt;span&gt;=&lt;/span&gt; MockConn&lt;/div&gt;&lt;div&gt;        requests.get &lt;span&gt;=&lt;/span&gt; mock_aws_get&lt;/div&gt;&lt;div&gt;        &lt;span&gt;# confirm that requests is patched hence returns short fixture of JSON from the AWS URLs&lt;/span&gt;&lt;/div&gt;&lt;div&gt;        result &lt;span&gt;=&lt;/span&gt; requests.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;/AmazonS3/current/index.json&quot;&lt;/span&gt;.format(ROOT))&lt;/div&gt;&lt;div&gt;        &lt;span&gt;assert&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(result.json().keys()) &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(result.content) &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;2000&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;A simple DAG with Soda Data validation&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;The click commands for each DAG are imported at the top, one for the scrape and one for postgres embedded, the DAG just becomes a wrapper to run them, adding Soda data validation of the scraped data ...&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;scrape_azure&lt;/span&gt;&lt;span&gt;():&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;Scrape Azure via API public json web pages&quot;&quot;&quot;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; price_scraper.commands &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; azurescrape, pgembed&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;folder, port &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; setup_pg_db(PORT&lt;/span&gt;&lt;span&gt;)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; azurescrape.run_azure_scrape(port, HOST)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt; error:&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; csp_dump(port, &lt;/span&gt;&lt;span&gt;&quot;azure&quot;&lt;/span&gt;&lt;span&gt;)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; error:&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pgembed.teardown_pg_embed(folder)&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify_slack(&lt;/span&gt;&lt;span&gt;&quot;azure&quot;&lt;/span&gt;&lt;span&gt;, error)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; AirflowFailException(error)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;data_test &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; SodaScanOperator(&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;dag&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;dag,&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;task_id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;data_test&quot;&lt;/span&gt;&lt;span&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;data_sources&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;data_source_name&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&quot;embedpg&quot;&lt;/span&gt;&lt;span&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&quot;soda_config_path&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&quot;price-scraper/soda/configuration_azure.yml&quot;&lt;/span&gt;&lt;span&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;soda_cl_path&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;price-scraper/soda/price_azure_checks.yml&quot;&lt;/span&gt;&lt;span&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;data_test.execute(&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;&lt;span&gt;())&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pgembed.teardown_pg_embed(folder)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-ff8941e2-7fff-b3dd-a8dc-df374c429826&quot;&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;We setup a new Embedded Postgres (takes a few seconds) and then scrape directly to it.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;We then use the SodaScanOperator to check the data we have scraped,  i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;f there is no error we dump to blob storage &lt;/span&gt;&lt;span&gt;otherwise notify Slack with the error and raise it ending the DAG&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Our Soda tests check that the number of and prices are in the ranges that they should be for each service. We also check we have the amount of tiered rates that we expect.
We expect over 10 starting usage rates and over 3000 specific tiered prices.

&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;If the Soda tests pass, we dump to cloud storage and teardown temporary Postgres. A final step aggregates together each steps data. We save the money and maintenance of running a persistent database cluster in the cloud for our pipeline.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 15 Jun 2025 18:00:46 +0000</pubDate>
</item>

</channel>
</rss>
